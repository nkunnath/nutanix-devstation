openapi: 3.0.1
info:
  title: Nutanix Lcm Versioned APIs
  description: Manage Infrastructure, Software and Firmware Upgrades.
  version: 4.0.1-alpha-1
  x-logo:
    altText: Lcm Logo
    url: https://developers.nutanix.com/api/v1/namespaces/lcm/images/lcm-logo-img.svg
  x-repo-name: lcm
servers:
- url: https://{pc-ip}:9440/api
security:
- basicAuthScheme: []
paths:
  /lcm/v4.0.a1/operations/$actions/cancelupdate:
    post:
      tags:
      - CancelUpdate
      summary: Set intent to cancel ongoing LCM update
      description: Cancel LCM Update
      operationId: postCancelUpdate
      responses:
        202:
          description: Set intent to cancel LCM update
          headers:
            Location:
              style: simple
              explode: false
              schema:
                pattern: ^((http[s]?):\/)?\/?([^:\/\s]+)((\/\w+)*(:[0-9]+)*?\/)([\w\-\.]+[^#?\s]+)(.*)?(#[\w\-]+)?$
                type: string
                description: Indicates the target of a redirection or the URL of a
                  newly created resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.operations.CancelUpdateApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.operations.CancelUpdateApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.operations.CancelUpdateApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.CancelUpdateApi;\nimport com.nutanix.dp1.lcm.lcm.v4.operations.CancelUpdateApiResponse;\n\
          \npublic class JavaSdkSample {\n\tpublic static void main(String[] args)\
          \ {\n\t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tCancelUpdateApi cancelUpdateApi = new CancelUpdateApi(client);\n\
          \n\t\tCancelUpdateApiResponse cancelUpdateApiResponse = cancelUpdateApi.postCancelUpdate();\n\
          \t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import CancelUpdateApi from "@nutanix/lcm-js-client/src/apis/CancelUpdate-endpoints";
          import CancelUpdateApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/operations/CancelUpdateApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let cancelUpdateApi = new CancelUpdateApi(apiClientInstance);

          function sample() {

              cancelUpdateApi.postCancelUpdate().then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              cancelUpdateApi = ntnx_lcm_py_client.CancelUpdateApi(api_client=client)
              api_response = cancelUpdateApi.post_cancel_update()
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              CancelUpdateApiInstance *api.CancelUpdateApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              CancelUpdateApiInstance = api.CancelUpdateApi(ApiClientInstance)


              response, _ := CancelUpdateApiInstance.PostCancelUpdate()
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request POST \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/operations/$actions/cancelupdate" \
               --header 'Accept: application/json' \
      - lang: Wget
        source: |2

          wget --verbose \
               --method POST \
               --header 'Accept: application/json' \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/operations/$actions/cancelupdate"
  /lcm/v4.0.a1/operations/$actions/downloadImages:
    post:
      tags:
      - Download
      summary: Download an image of a product through LCM
      description: Initiate LCM image download
      operationId: download
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lcm.v4.r0.a1.common.ImageDownloadSpecs'
      responses:
        202:
          description: LCM download operation triggered with the task UUID
          headers:
            Location:
              style: simple
              explode: false
              schema:
                pattern: ^((http[s]?):\/)?\/?([^:\/\s]+)((\/\w+)*(:[0-9]+)*?\/)([\w\-\.]+[^#?\s]+)(.*)?(#[\w\-]+)?$
                type: string
                description: Indicates the target of a redirection or the URL of a
                  newly created resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.operations.GetDownloadApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.operations.GetDownloadApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.operations.GetDownloadApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.DownloadApi;\nimport com.nutanix.dp1.lcm.lcm.v4.common.ImageDownloadSpecs;\n\
          import com.nutanix.dp1.lcm.lcm.v4.operations.GetDownloadApiResponse;\n\n\
          public class JavaSdkSample {\n\tpublic static void main(String[] args) {\n\
          \t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tDownloadApi downloadApi = new DownloadApi(client);\n\n\t\tImageDownloadSpecs\
          \ imageDownloadSpecs = new ImageDownloadSpecs();\n\n\t\t// ImageDownloadSpecs\
          \ object initializations here...\n\n\t\tGetDownloadApiResponse getDownloadApiResponse\
          \ = downloadApi.download(imageDownloadSpecs);\n\t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import DownloadApi from "@nutanix/lcm-js-client/src/apis/Download-endpoints";
          import ImageDownloadSpecs from "@nutanix/lcm-js-client/src/models/lcm/v4/common/ImageDownloadSpecs";
          import GetDownloadApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/operations/GetDownloadApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let downloadApi = new DownloadApi(apiClientInstance);

          function sample() {
              let imageDownloadSpecs = new ImageDownloadSpecs();

              // ImageDownloadSpecs object initializations here...


              downloadApi.download(imageDownloadSpecs, ).then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              downloadApi = ntnx_lcm_py_client.DownloadApi(api_client=client)
              imageDownloadSpecs = ntnx_lcm_py_client.ImageDownloadSpecs()

              # ImageDownloadSpecs object initializations here...

              api_response = downloadApi.download(imageDownloadSpecs)
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              import1 "nutanix/lcm-go-client/models/lcm/v4/defaultapi"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              DownloadApiInstance *api.DownloadApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              DownloadApiInstance = api.DownloadApi(ApiClientInstance)

              imageDownloadSpecs := import1.newImageDownloadSpecs()

              // ImageDownloadSpecs object initializations here...


              response, _ := DownloadApiInstance.Download(imageDownloadSpecs)
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request POST \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/operations/$actions/downloadImages" \
               --header 'Accept: application/json' \
               --header 'Content-Type: application/json' \
               --data {"imageDownloadSpecs":[{"entityClass":"string","entityModel":"string","locationId":"string","version":"string","entityUuid":"string","hardwareFamily":"string","$objectType":"lcm.v4.common.ImageDownloadSpec"}],"$objectType":"lcm.v4.common.ImageDownloadSpecs"} \
      - lang: Wget
        source: |2

          wget --verbose \
               --method POST \
               --header 'Accept: application/json' \
               --header 'Content-Type: application/json' \
               --body-data {"imageDownloadSpecs":[{"entityClass":"string","entityModel":"string","locationId":"string","version":"string","entityUuid":"string","hardwareFamily":"string","$objectType":"lcm.v4.common.ImageDownloadSpec"}],"$objectType":"lcm.v4.common.ImageDownloadSpecs"} \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/operations/$actions/downloadImages"
  /lcm/v4.0.a1/operations/$actions/performInventory:
    post:
      tags:
      - Inventory
      summary: Perform an inventory operation to identify entities that can be updated
        through LCM
      description: Perform an LCM inventory operation
      operationId: inventory
      responses:
        202:
          description: LCM inventory operation triggered with the task UUID
          headers:
            Location:
              style: simple
              explode: false
              schema:
                pattern: ^((http[s]?):\/)?\/?([^:\/\s]+)((\/\w+)*(:[0-9]+)*?\/)([\w\-\.]+[^#?\s]+)(.*)?(#[\w\-]+)?$
                type: string
                description: Indicates the target of a redirection or the URL of a
                  newly created resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.operations.InventoryApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.operations.InventoryApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.operations.InventoryApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.InventoryApi;\nimport com.nutanix.dp1.lcm.lcm.v4.operations.InventoryApiResponse;\n\
          \npublic class JavaSdkSample {\n\tpublic static void main(String[] args)\
          \ {\n\t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tInventoryApi inventoryApi = new InventoryApi(client);\n\n\t\t\
          InventoryApiResponse inventoryApiResponse = inventoryApi.inventory();\n\t\
          }\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import InventoryApi from "@nutanix/lcm-js-client/src/apis/Inventory-endpoints";
          import InventoryApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/operations/InventoryApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let inventoryApi = new InventoryApi(apiClientInstance);

          function sample() {

              inventoryApi.inventory().then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              inventoryApi = ntnx_lcm_py_client.InventoryApi(api_client=client)
              api_response = inventoryApi.inventory()
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              InventoryApiInstance *api.InventoryApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              InventoryApiInstance = api.InventoryApi(ApiClientInstance)


              response, _ := InventoryApiInstance.Inventory()
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request POST \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/operations/$actions/performInventory" \
               --header 'Accept: application/json' \
      - lang: Wget
        source: |2

          wget --verbose \
               --method POST \
               --header 'Accept: application/json' \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/operations/$actions/performInventory"
  /lcm/v4.0.a1/operations/$actions/performPrecheck:
    post:
      tags:
      - Precheck
      summary: Perform a LCM precheck operation
      description: Perform LCM precheck
      operationId: precheck
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lcm.v4.r0.a1.common.PrecheckSpec'
      responses:
        202:
          description: LCM precheck operation triggered with the task UUID
          headers:
            Location:
              style: simple
              explode: false
              schema:
                pattern: ^((http[s]?):\/)?\/?([^:\/\s]+)((\/\w+)*(:[0-9]+)*?\/)([\w\-\.]+[^#?\s]+)(.*)?(#[\w\-]+)?$
                type: string
                description: Indicates the target of a redirection or the URL of a
                  newly created resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.operations.PrecheckApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.operations.PrecheckApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.operations.PrecheckApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.PrecheckApi;\nimport com.nutanix.dp1.lcm.lcm.v4.common.PrecheckSpec;\n\
          import com.nutanix.dp1.lcm.lcm.v4.operations.PrecheckApiResponse;\n\npublic\
          \ class JavaSdkSample {\n\tpublic static void main(String[] args) {\n\t\t\
          ApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\");\n\
          \t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tPrecheckApi precheckApi = new PrecheckApi(client);\n\n\t\tPrecheckSpec\
          \ precheckSpec = new PrecheckSpec();\n\n\t\t// PrecheckSpec object initializations\
          \ here...\n\n\t\tPrecheckApiResponse precheckApiResponse = precheckApi.precheck(precheckSpec);\n\
          \t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import PrecheckApi from "@nutanix/lcm-js-client/src/apis/Precheck-endpoints";
          import PrecheckSpec from "@nutanix/lcm-js-client/src/models/lcm/v4/common/PrecheckSpec";
          import PrecheckApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/operations/PrecheckApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let precheckApi = new PrecheckApi(apiClientInstance);

          function sample() {
              let precheckSpec = new PrecheckSpec();

              // PrecheckSpec object initializations here...


              precheckApi.precheck(precheckSpec, ).then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              precheckApi = ntnx_lcm_py_client.PrecheckApi(api_client=client)
              precheckSpec = ntnx_lcm_py_client.PrecheckSpec()

              # PrecheckSpec object initializations here...

              api_response = precheckApi.precheck(precheckSpec)
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              import1 "nutanix/lcm-go-client/models/lcm/v4/defaultapi"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              PrecheckApiInstance *api.PrecheckApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              PrecheckApiInstance = api.PrecheckApi(ApiClientInstance)

              precheckSpec := import1.newPrecheckSpec()

              // PrecheckSpec object initializations here...


              response, _ := PrecheckApiInstance.Precheck(precheckSpec)
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request POST \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/operations/$actions/performPrecheck" \
               --header 'Accept: application/json' \
               --header 'Content-Type: application/json' \
               --data {"managementServer":{"hypervisorType":"$UNKNOWN","ip":"string","username":"string","password":"string","$objectType":"lcm.v4.common.ManagementServer"},"entityUpdateSpecs":[{"entityUuid":"string","version":"string","$objectType":"lcm.v4.common.EntityUpdateSpec"}],"skippedPrecheckFlags":["$UNKNOWN"],"$objectType":"lcm.v4.common.PrecheckSpec"} \
      - lang: Wget
        source: |2

          wget --verbose \
               --method POST \
               --header 'Accept: application/json' \
               --header 'Content-Type: application/json' \
               --body-data {"managementServer":{"hypervisorType":"$UNKNOWN","ip":"string","username":"string","password":"string","$objectType":"lcm.v4.common.ManagementServer"},"entityUpdateSpecs":[{"entityUuid":"string","version":"string","$objectType":"lcm.v4.common.EntityUpdateSpec"}],"skippedPrecheckFlags":["$UNKNOWN"],"$objectType":"lcm.v4.common.PrecheckSpec"} \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/operations/$actions/performPrecheck"
  /lcm/v4.0.a1/operations/$actions/performUpdate:
    post:
      tags:
      - Update
      summary: Perform an LCM update operation
      description: Perform an LCM update operation
      operationId: update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lcm.v4.r0.a1.common.UpdateSpec'
      responses:
        202:
          description: LCM update operation triggered with the task UUID
          headers:
            Location:
              style: simple
              explode: false
              schema:
                pattern: ^((http[s]?):\/)?\/?([^:\/\s]+)((\/\w+)*(:[0-9]+)*?\/)([\w\-\.]+[^#?\s]+)(.*)?(#[\w\-]+)?$
                type: string
                description: Indicates the target of a redirection or the URL of a
                  newly created resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.operations.UpdateApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.operations.UpdateApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.operations.UpdateApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.UpdateApi;\nimport com.nutanix.dp1.lcm.lcm.v4.common.UpdateSpec;\n\
          import com.nutanix.dp1.lcm.lcm.v4.operations.UpdateApiResponse;\n\npublic\
          \ class JavaSdkSample {\n\tpublic static void main(String[] args) {\n\t\t\
          ApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\");\n\
          \t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tUpdateApi updateApi = new UpdateApi(client);\n\n\t\tUpdateSpec\
          \ updateSpec = new UpdateSpec();\n\n\t\t// UpdateSpec object initializations\
          \ here...\n\n\t\tUpdateApiResponse updateApiResponse = updateApi.update(updateSpec);\n\
          \t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import UpdateApi from "@nutanix/lcm-js-client/src/apis/Update-endpoints";
          import UpdateSpec from "@nutanix/lcm-js-client/src/models/lcm/v4/common/UpdateSpec";
          import UpdateApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/operations/UpdateApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let updateApi = new UpdateApi(apiClientInstance);

          function sample() {
              let updateSpec = new UpdateSpec();

              // UpdateSpec object initializations here...


              updateApi.update(updateSpec, ).then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              updateApi = ntnx_lcm_py_client.UpdateApi(api_client=client)
              updateSpec = ntnx_lcm_py_client.UpdateSpec()

              # UpdateSpec object initializations here...

              api_response = updateApi.update(updateSpec)
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              import1 "nutanix/lcm-go-client/models/lcm/v4/defaultapi"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              UpdateApiInstance *api.UpdateApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              UpdateApiInstance = api.UpdateApi(ApiClientInstance)

              updateSpec := import1.newUpdateSpec()

              // UpdateSpec object initializations here...


              response, _ := UpdateApiInstance.Update(updateSpec)
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request POST \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/operations/$actions/performUpdate" \
               --header 'Accept: application/json' \
               --header 'Content-Type: application/json' \
               --data {"managementServer":{"hypervisorType":"$UNKNOWN","ip":"string","username":"string","password":"string","$objectType":"lcm.v4.common.ManagementServer"},"entityUpdateSpecs":[{"entityUuid":"string","version":"string","$objectType":"lcm.v4.common.EntityUpdateSpec"}],"skippedPrecheckFlags":["$UNKNOWN"],"autoHandleFlags":["$UNKNOWN"],"waitInSecForAppUp":0,"$objectType":"lcm.v4.common.UpdateSpec"} \
      - lang: Wget
        source: |2

          wget --verbose \
               --method POST \
               --header 'Accept: application/json' \
               --header 'Content-Type: application/json' \
               --body-data {"managementServer":{"hypervisorType":"$UNKNOWN","ip":"string","username":"string","password":"string","$objectType":"lcm.v4.common.ManagementServer"},"entityUpdateSpecs":[{"entityUuid":"string","version":"string","$objectType":"lcm.v4.common.EntityUpdateSpec"}],"skippedPrecheckFlags":["$UNKNOWN"],"autoHandleFlags":["$UNKNOWN"],"waitInSecForAppUp":0,"$objectType":"lcm.v4.common.UpdateSpec"} \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/operations/$actions/performUpdate"
  /lcm/v4.0.a1/resources/bundles/{uuid}:
    get:
      tags:
      - Bundles
      description: Get bundle details for bundle UUID.
      operationId: getBundle
      parameters:
      - name: uuid
        in: path
        description: UUID of the LCM bundle
        required: true
        style: simple
        explode: false
        schema:
          pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
          type: string
      responses:
        200:
          description: Queried bundle information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetBundleInfoApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetBundleInfoApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetBundleInfoApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.BundlesApi;\nimport com.nutanix.dp1.lcm.lcm.v4.resources.GetBundleInfoApiResponse;\n\
          \npublic class JavaSdkSample {\n\tpublic static void main(String[] args)\
          \ {\n\t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tBundlesApi bundlesApi = new BundlesApi(client);\n\n\t\tString\
          \ uuid = \"^F9BED2D5-3EC1-dc83-EF2B-C1ADB3cDA5BA$\";\n\t\tGetBundleInfoApiResponse\
          \ getBundleInfoApiResponse = bundlesApi.getBundle(uuid);\n\t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import BundlesApi from "@nutanix/lcm-js-client/src/apis/Bundles-endpoints";
          import GetBundleInfoApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/GetBundleInfoApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let bundlesApi = new BundlesApi(apiClientInstance);

          function sample() {
              let uuid = "^6e1A51a1-c017-bB0B-8422-B1a6BaBe6FEc$";

              bundlesApi.getBundle(uuid).then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              bundlesApi = ntnx_lcm_py_client.BundlesApi(api_client=client)
              uuid = "^ffA0d8e5-07Ef-2Bd7-f5d1-BAa6dA8fbBBd$"
              api_response = bundlesApi.get_bundle(uuid)
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              BundlesApiInstance *api.BundlesApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              BundlesApiInstance = api.BundlesApi(ApiClientInstance)

              uuid := "^fE6BcBcb-4aCA-7F0B-D8e2-CfEaEFe2DBba$"

              response, _ := BundlesApiInstance.GetBundle(uuid)
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request GET \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/bundles/^E1bBEFf9-15dE-ebFc-68AD-16bC5a47eaCE$" \
               --header 'Accept: application/json' \
      - lang: Wget
        source: |2

          wget --verbose \
               --method GET \
               --header 'Accept: application/json' \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/bundles/^0B1d8BBf-Fce9-d0dA-d0f6-2A10Da10947d$"
    put:
      tags:
      - Bundles
      description: Update bundle information for a specified UUID
      operationId: putBundle
      parameters:
      - name: uuid
        in: path
        description: UUID of the LCM bundle
        required: true
        style: simple
        explode: false
        schema:
          pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
          type: string
      requestBody:
        description: The file stream being uploaded into a bundle
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        202:
          description: Bundle update response
          headers:
            Location:
              style: simple
              explode: false
              schema:
                pattern: ^((http[s]?):\/)?\/?([^:\/\s]+)((\/\w+)*(:[0-9]+)*?\/)([\w\-\.]+[^#?\s]+)(.*)?(#[\w\-]+)?$
                type: string
                description: Indicates the target of a redirection or the URL of a
                  newly created resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.PutBundleApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.PutBundleApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.PutBundleApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.BundlesApi;\nimport com.nutanix.dp1.lcm.lcm.v4.resources.PutBundleApiResponse;\n\
          \npublic class JavaSdkSample {\n\tpublic static void main(String[] args)\
          \ {\n\t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tBundlesApi bundlesApi = new BundlesApi(client);\n\n\t\tbyte[]\
          \ requestBody = new byte[16];\n\n\t\t// requestBody initializations here...\n\
          \n\t\tString uuid = \"^2Ff61f7C-D5be-6227-F0bE-E11bcddA8c5b$\";\n\t\tPutBundleApiResponse\
          \ putBundleApiResponse = bundlesApi.putBundle(requestBody, uuid);\n\t}\n\
          }\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import BundlesApi from "@nutanix/lcm-js-client/src/apis/Bundles-endpoints";
          import PutBundleApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/PutBundleApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let bundlesApi = new BundlesApi(apiClientInstance);

          function sample() {
              let requestBody = new ArrayBuffer(16);

              // requestBody initializations here...

              let uuid = "^Bb283dD3-cEDA-EB6a-86B3-BB221fabeb5F$";

              bundlesApi.putBundle(requestBody, uuid).then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              bundlesApi = ntnx_lcm_py_client.BundlesApi(api_client=client)
              requestBody = bytearray(16)

              # requestBody initializations here...

              uuid = "^a2Bffbbd-cef9-21dD-cBe4-ff1B6E41B61b$"
              api_response = bundlesApi.put_bundle(requestBody, uuid)
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              import1 "nutanix/lcm-go-client/models/lcm/v4/defaultapi"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              BundlesApiInstance *api.BundlesApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              BundlesApiInstance = api.BundlesApi(ApiClientInstance)

              requestBody := &bytes.Buffer{}
              uuid := "^E8Ccd6FD-9Eeb-A3b9-b3Bc-2A8Dd7EaDd7c$"

              response, _ := BundlesApiInstance.PutBundle(requestBody, uuid)
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request PUT \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/bundles/^Fc9cACFb-02Ed-FDeA-aFdA-0adbAAb9CBCa$" \
               --header 'Accept: application/json' \
               --header 'Content-Type: application/octet-stream' \
               --data_binary @SOME_BINARY_DATA \
      - lang: Wget
        source: |2

          wget --verbose \
               --method PUT \
               --header 'Accept: application/json' \
               --header 'Content-Type: application/octet-stream' \
               --post-file @SOME_BINARY_DATA \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/bundles/^b8f9D5dC-AE94-a8AD-cBf5-dcf943513eE8$"
    delete:
      tags:
      - Bundles
      description: Delete bundle for the specified UUID.
      operationId: deleteBundle
      parameters:
      - name: uuid
        in: path
        description: UUID of the LCM bundle
        required: true
        style: simple
        explode: false
        schema:
          pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
          type: string
      responses:
        204:
          description: Deleted bundle matching the input UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.DelBundleApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.DelBundleApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.DelBundleApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.BundlesApi;\nimport com.nutanix.dp1.lcm.lcm.v4.resources.DelBundleApiResponse;\n\
          \npublic class JavaSdkSample {\n\tpublic static void main(String[] args)\
          \ {\n\t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tBundlesApi bundlesApi = new BundlesApi(client);\n\n\t\tString\
          \ uuid = \"^49Be9CbF-eb05-2cBc-Fa29-10Dda03C648f$\";\n\t\tDelBundleApiResponse\
          \ delBundleApiResponse = bundlesApi.deleteBundle(uuid);\n\t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import BundlesApi from "@nutanix/lcm-js-client/src/apis/Bundles-endpoints";
          import DelBundleApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/DelBundleApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let bundlesApi = new BundlesApi(apiClientInstance);

          function sample() {
              let uuid = "^b1DB8F7A-EbC3-5224-BDee-1ccA2D2f7B92$";

              bundlesApi.deleteBundle(uuid).then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              bundlesApi = ntnx_lcm_py_client.BundlesApi(api_client=client)
              uuid = "^dE555dC5-b57B-cAcC-D2df-cAa8495CFaAA$"
              api_response = bundlesApi.delete_bundle(uuid)
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              BundlesApiInstance *api.BundlesApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              BundlesApiInstance = api.BundlesApi(ApiClientInstance)

              uuid := "^f30BeEfE-f4Af-7d4f-cFbC-72E8e93BCCe8$"

              response, _ := BundlesApiInstance.DeleteBundle(uuid)
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request DELETE \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/bundles/^0FFeCcBC-C0F0-9aF1-9DCA-aAfA68EEb2e4$" \
               --header 'Accept: application/json' \
      - lang: Wget
        source: |2

          wget --verbose \
               --method DELETE \
               --header 'Accept: application/json' \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/bundles/^dd1AA247-2C0A-a9EF-F0cd-4cf20F7Cc741$"
  /lcm/v4.0.a1/resources/bundles:
    get:
      tags:
      - Bundles
      description: Query list of bundles
      operationId: getBundles
      parameters:
      - name: $page
        in: query
        description: |
          A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages would be set to the last page.
        required: false
        style: form
        explode: false
        schema:
          minimum: 0
          type: integer
          description: |
            A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages would be set to the last page.
          format: int32
          default: 0
      - name: $limit
        in: query
        description: |
          A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 100. Any number out of this range will be set to the default maximum number of records, which is 100.
        required: false
        style: form
        explode: false
        schema:
          maximum: 100
          type: integer
          description: |
            A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 100. Any number out of this range will be set to the default maximum number of records, which is 100.
          format: int32
          default: 50
      - name: $filter
        in: query
        description: |
          A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the OData V4.01 URL conventions.
          The filter can be applied on the following fields:
          - type
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: Paginated list of bundles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetBundlesApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetBundlesApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetBundlesApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.BundlesApi;\nimport com.nutanix.dp1.lcm.lcm.v4.resources.GetBundlesApiResponse;\n\
          \npublic class JavaSdkSample {\n\tpublic static void main(String[] args)\
          \ {\n\t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tBundlesApi bundlesApi = new BundlesApi(client);\n\n\t\tint $page\
          \ = 0;\n\t\tint $limit = 50;\n\t\tString $filter = \"string_sample_data\"\
          ;\n\t\tGetBundlesApiResponse getBundlesApiResponse = bundlesApi.getBundles($page,\
          \ $limit, $filter);\n\t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import BundlesApi from "@nutanix/lcm-js-client/src/apis/Bundles-endpoints";
          import GetBundlesApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/GetBundlesApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let bundlesApi = new BundlesApi(apiClientInstance);

          function sample() {
              let $page = 0;
              let $limit = 50;
              let $filter = "string_sample_data";

              bundlesApi.getBundles($page, $limit, $filter).then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              bundlesApi = ntnx_lcm_py_client.BundlesApi(api_client=client)
              $page = 0
              $limit = 50
              $filter = "string_sample_data"
              api_response = bundlesApi.get_bundles($page, $limit, $filter)
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              BundlesApiInstance *api.BundlesApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              BundlesApiInstance = api.BundlesApi(ApiClientInstance)

              $page := 0
              $limit := 50
              $filter := "string_sample_data"

              response, _ := BundlesApiInstance.GetBundles($page, $limit, $filter)
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request GET \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/bundles?$filter=string_sample_data&$limit=50&$page=0" \
               --header 'Accept: application/json' \
      - lang: Wget
        source: |2

          wget --verbose \
               --method GET \
               --header 'Accept: application/json' \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/bundles?$filter=string_sample_data&$limit=50&$page=0"
    post:
      tags:
      - Bundles
      description: Create a bundle
      operationId: postBundle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LcmBundlesSpec'
      responses:
        202:
          description: 'Bundle create response '
          headers:
            Location:
              style: simple
              explode: false
              schema:
                pattern: ^((http[s]?):\/)?\/?([^:\/\s]+)((\/\w+)*(:[0-9]+)*?\/)([\w\-\.]+[^#?\s]+)(.*)?(#[\w\-]+)?$
                type: string
                description: Indicates the target of a redirection or the URL of a
                  newly created resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.PostBundlesApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.PostBundlesApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.PostBundlesApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.BundlesApi;\nimport com.nutanix.dp1.lcm.lcm.v4.resources.LcmBundlesSpec;\n\
          import com.nutanix.dp1.lcm.lcm.v4.resources.PostBundlesApiResponse;\n\n\
          public class JavaSdkSample {\n\tpublic static void main(String[] args) {\n\
          \t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tBundlesApi bundlesApi = new BundlesApi(client);\n\n\t\tLcmBundlesSpec\
          \ lcmBundlesSpec = new LcmBundlesSpec();\n\n\t\t// LcmBundlesSpec object\
          \ initializations here...\n\n\t\tPostBundlesApiResponse postBundlesApiResponse\
          \ = bundlesApi.postBundle(lcmBundlesSpec);\n\t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import BundlesApi from "@nutanix/lcm-js-client/src/apis/Bundles-endpoints";
          import LcmBundlesSpec from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/LcmBundlesSpec";
          import PostBundlesApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/PostBundlesApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let bundlesApi = new BundlesApi(apiClientInstance);

          function sample() {
              let lcmBundlesSpec = new LcmBundlesSpec();

              // LcmBundlesSpec object initializations here...


              bundlesApi.postBundle(lcmBundlesSpec, ).then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              bundlesApi = ntnx_lcm_py_client.BundlesApi(api_client=client)
              lcmBundlesSpec = ntnx_lcm_py_client.LcmBundlesSpec()

              # LcmBundlesSpec object initializations here...

              api_response = bundlesApi.post_bundle(lcmBundlesSpec)
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              import1 "nutanix/lcm-go-client/models/lcm/v4/defaultapi"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              BundlesApiInstance *api.BundlesApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              BundlesApiInstance = api.BundlesApi(ApiClientInstance)

              lcmBundlesSpec := import1.newLcmBundlesSpec()

              // LcmBundlesSpec object initializations here...


              response, _ := BundlesApiInstance.PostBundle(lcmBundlesSpec)
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request POST \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/bundles" \
               --header 'Accept: application/json' \
               --header 'Content-Type: application/json' \
               --data {"isThirdParty":true,"thirdPartySpec":{"specVersion":"string","version":"string","entityClass":"string","entityModel":"string","hwFamilyList":"string","releaseNotes":"string","status":"$UNKNOWN","imageDetails":[{"checksumType":"shasum","checksum":"string","size":0,"name":"string","$objectType":"lcm.v4.resources.ThirdPartyImageFileDetailsSpec"}],"$objectType":"lcm.v4.resources.LcmThirdPartyUploadSpec"},"redistributableSpec":{"name":"string","$objectType":"lcm.v4.resources.LcmRedistributableUploadSpec"},"$objectType":"lcm.v4.resources.LcmBundlesSpec"} \
      - lang: Wget
        source: |2

          wget --verbose \
               --method POST \
               --header 'Accept: application/json' \
               --header 'Content-Type: application/json' \
               --body-data {"isThirdParty":true,"thirdPartySpec":{"specVersion":"string","version":"string","entityClass":"string","entityModel":"string","hwFamilyList":"string","releaseNotes":"string","status":"$UNKNOWN","imageDetails":[{"checksumType":"shasum","checksum":"string","size":0,"name":"string","$objectType":"lcm.v4.resources.ThirdPartyImageFileDetailsSpec"}],"$objectType":"lcm.v4.resources.LcmThirdPartyUploadSpec"},"redistributableSpec":{"name":"string","$objectType":"lcm.v4.resources.LcmRedistributableUploadSpec"},"$objectType":"lcm.v4.resources.LcmBundlesSpec"} \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/bundles"
  /lcm/v4.0.a1/resources/config:
    get:
      tags:
      - Config
      summary: Get the present LCM configuration
      description: Get LCM configuration
      operationId: getConfig
      responses:
        200:
          description: Details of queried LCM configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetLcmConfigApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetLcmConfigApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetLcmConfigApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.ConfigApi;\nimport com.nutanix.dp1.lcm.lcm.v4.resources.GetLcmConfigApiResponse;\n\
          \npublic class JavaSdkSample {\n\tpublic static void main(String[] args)\
          \ {\n\t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tConfigApi configApi = new ConfigApi(client);\n\n\t\tGetLcmConfigApiResponse\
          \ getLcmConfigApiResponse = configApi.getConfig();\n\t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import ConfigApi from "@nutanix/lcm-js-client/src/apis/Config-endpoints";
          import GetLcmConfigApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/GetLcmConfigApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let configApi = new ConfigApi(apiClientInstance);

          function sample() {

              configApi.getConfig().then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              configApi = ntnx_lcm_py_client.ConfigApi(api_client=client)
              api_response = configApi.get_config()
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              ConfigApiInstance *api.ConfigApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              ConfigApiInstance = api.ConfigApi(ApiClientInstance)


              response, _ := ConfigApiInstance.GetConfig()
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request GET \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/config" \
               --header 'Accept: application/json' \
      - lang: Wget
        source: |2

          wget --verbose \
               --method GET \
               --header 'Accept: application/json' \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/config"
    put:
      tags:
      - Config
      summary: Change the LCM configuration
      description: Update LCM configuration
      operationId: putConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LcmConfig'
      responses:
        202:
          description: LCM configuration updated
          headers:
            Location:
              style: simple
              explode: false
              schema:
                pattern: ^((http[s]?):\/)?\/?([^:\/\s]+)((\/\w+)*(:[0-9]+)*?\/)([\w\-\.]+[^#?\s]+)(.*)?(#[\w\-]+)?$
                type: string
                description: Indicates the target of a redirection or the URL of a
                  newly created resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.PutLcmConfigApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.PutLcmConfigApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.PutLcmConfigApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.ConfigApi;\nimport com.nutanix.dp1.lcm.lcm.v4.resources.LcmConfig;\n\
          import com.nutanix.dp1.lcm.lcm.v4.resources.PutLcmConfigApiResponse;\n\n\
          public class JavaSdkSample {\n\tpublic static void main(String[] args) {\n\
          \t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tConfigApi configApi = new ConfigApi(client);\n\n\t\tLcmConfig\
          \ lcmConfig = new LcmConfig();\n\n\t\t// LcmConfig object initializations\
          \ here...\n\n\t\tPutLcmConfigApiResponse putLcmConfigApiResponse = configApi.putConfig(lcmConfig);\n\
          \t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import ConfigApi from "@nutanix/lcm-js-client/src/apis/Config-endpoints";
          import LcmConfig from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/LcmConfig";
          import PutLcmConfigApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/PutLcmConfigApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let configApi = new ConfigApi(apiClientInstance);

          function sample() {
              let lcmConfig = new LcmConfig();

              // LcmConfig object initializations here...


              configApi.putConfig(lcmConfig, ).then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              configApi = ntnx_lcm_py_client.ConfigApi(api_client=client)
              lcmConfig = ntnx_lcm_py_client.LcmConfig()

              # LcmConfig object initializations here...

              api_response = configApi.put_config(lcmConfig)
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              import1 "nutanix/lcm-go-client/models/lcm/v4/defaultapi"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              ConfigApiInstance *api.ConfigApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              ConfigApiInstance = api.ConfigApi(ApiClientInstance)

              lcmConfig := import1.newLcmConfig()

              // LcmConfig object initializations here...


              response, _ := ConfigApiInstance.PutConfig(lcmConfig)
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request PUT \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/config" \
               --header 'Accept: application/json' \
               --header 'Content-Type: application/json' \
               --data {"url":"string","autoInventoryEnabled":true,"autoInventoryScheduledTime":"string","inventoryParallelLimit":0,"uiVersion":"string","lcmVersion":"string","semanticVersion":"string","buildType":"string","skippedPrecheckNames":["string"],"productMetaDisabled":true,"productMetaUrl":"string","recoveryDisabled":true,"isDarksite":true,"enableHttps":true,"apiEnabled":true,"prismApiTimeout":0,"distributeInventory":true,"userPreferences":[{"userChangedHttp":true,"$objectType":"lcm.v4.resources.UserPreference"}],"metricsEnabled":true,"supportedSoftwareEntities":["string"],"deprecatedSoftwareEntities":["string"],"uploadedBundle":true,"moduleAutoUpgradeEnabled":true,"redfishOOBUpdateSupport":true,"enableAutoLogCollection":true,"$objectType":"lcm.v4.resources.LcmConfig"} \
      - lang: Wget
        source: |2

          wget --verbose \
               --method PUT \
               --header 'Accept: application/json' \
               --header 'Content-Type: application/json' \
               --body-data {"url":"string","autoInventoryEnabled":true,"autoInventoryScheduledTime":"string","inventoryParallelLimit":0,"uiVersion":"string","lcmVersion":"string","semanticVersion":"string","buildType":"string","skippedPrecheckNames":["string"],"productMetaDisabled":true,"productMetaUrl":"string","recoveryDisabled":true,"isDarksite":true,"enableHttps":true,"apiEnabled":true,"prismApiTimeout":0,"distributeInventory":true,"userPreferences":[{"userChangedHttp":true,"$objectType":"lcm.v4.resources.UserPreference"}],"metricsEnabled":true,"supportedSoftwareEntities":["string"],"deprecatedSoftwareEntities":["string"],"uploadedBundle":true,"moduleAutoUpgradeEnabled":true,"redfishOOBUpdateSupport":true,"enableAutoLogCollection":true,"$objectType":"lcm.v4.resources.LcmConfig"} \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/config"
  /lcm/v4.0.a1/resources/config/node-priorities:
    get:
      tags:
      - NodePriorityConfig
      summary: Get the order in which nodes will be upgraded
      description: Get node priorities
      operationId: getNodePriorities
      responses:
        200:
          description: Details of node priorities queried
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetNodePrioritiesApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetNodePrioritiesApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetNodePrioritiesApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.NodePriorityConfigApi;\nimport com.nutanix.dp1.lcm.lcm.v4.resources.GetNodePrioritiesApiResponse;\n\
          \npublic class JavaSdkSample {\n\tpublic static void main(String[] args)\
          \ {\n\t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tNodePriorityConfigApi nodePriorityConfigApi = new NodePriorityConfigApi(client);\n\
          \n\t\tGetNodePrioritiesApiResponse getNodePrioritiesApiResponse = nodePriorityConfigApi.getNodePriorities();\n\
          \t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import NodePriorityConfigApi from "@nutanix/lcm-js-client/src/apis/NodePriorityConfig-endpoints";
          import GetNodePrioritiesApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/GetNodePrioritiesApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let nodePriorityConfigApi = new NodePriorityConfigApi(apiClientInstance);

          function sample() {

              nodePriorityConfigApi.getNodePriorities().then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              nodePriorityConfigApi = ntnx_lcm_py_client.NodePriorityConfigApi(api_client=client)
              api_response = nodePriorityConfigApi.get_node_priorities()
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              NodePriorityConfigApiInstance *api.NodePriorityConfigApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              NodePriorityConfigApiInstance = api.NodePriorityConfigApi(ApiClientInstance)


              response, _ := NodePriorityConfigApiInstance.GetNodePriorities()
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request GET \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/config/node-priorities" \
               --header 'Accept: application/json' \
      - lang: Wget
        source: |2

          wget --verbose \
               --method GET \
               --header 'Accept: application/json' \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/config/node-priorities"
    post:
      tags:
      - NodePriorityConfig
      summary: Set the order in which nodes will be upgraded
      description: Update node priority of the node
      operationId: postNodePriorities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lcm.v4.r0.a1.resources.NodePriorityConfig'
      responses:
        201:
          description: Node priority is updated as per the input
          headers:
            Location:
              style: simple
              explode: false
              schema:
                pattern: ^((http[s]?):\/)?\/?([^:\/\s]+)((\/\w+)*(:[0-9]+)*?\/)([\w\-\.]+[^#?\s]+)(.*)?(#[\w\-]+)?$
                type: string
                description: Indicates the target of a redirection or the URL of a
                  newly created resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.PostNodePrioritiesApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.PostNodePrioritiesApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.PostNodePrioritiesApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.NodePriorityConfigApi;\nimport com.nutanix.dp1.lcm.lcm.v4.resources.NodePriorityConfig;\n\
          import com.nutanix.dp1.lcm.lcm.v4.resources.PostNodePrioritiesApiResponse;\n\
          \npublic class JavaSdkSample {\n\tpublic static void main(String[] args)\
          \ {\n\t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tNodePriorityConfigApi nodePriorityConfigApi = new NodePriorityConfigApi(client);\n\
          \n\t\tNodePriorityConfig nodePriorityConfig = new NodePriorityConfig();\n\
          \n\t\t// NodePriorityConfig object initializations here...\n\n\t\tPostNodePrioritiesApiResponse\
          \ postNodePrioritiesApiResponse = nodePriorityConfigApi.postNodePriorities(nodePriorityConfig);\n\
          \t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import NodePriorityConfigApi from "@nutanix/lcm-js-client/src/apis/NodePriorityConfig-endpoints";
          import NodePriorityConfig from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/NodePriorityConfig";
          import PostNodePrioritiesApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/PostNodePrioritiesApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let nodePriorityConfigApi = new NodePriorityConfigApi(apiClientInstance);

          function sample() {
              let nodePriorityConfig = new NodePriorityConfig();

              // NodePriorityConfig object initializations here...


              nodePriorityConfigApi.postNodePriorities(nodePriorityConfig, ).then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              nodePriorityConfigApi = ntnx_lcm_py_client.NodePriorityConfigApi(api_client=client)
              nodePriorityConfig = ntnx_lcm_py_client.NodePriorityConfig()

              # NodePriorityConfig object initializations here...

              api_response = nodePriorityConfigApi.post_node_priorities(nodePriorityConfig)
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              import1 "nutanix/lcm-go-client/models/lcm/v4/defaultapi"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              NodePriorityConfigApiInstance *api.NodePriorityConfigApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              NodePriorityConfigApiInstance = api.NodePriorityConfigApi(ApiClientInstance)

              nodePriorityConfig := import1.newNodePriorityConfig()

              // NodePriorityConfig object initializations here...


              response, _ := NodePriorityConfigApiInstance.PostNodePriorities(nodePriorityConfig)
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request POST \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/config/node-priorities" \
               --header 'Accept: application/json' \
               --header 'Content-Type: application/json' \
               --data {"$objectType":"lcm.v4.resources.NodePriorityConfig"} \
      - lang: Wget
        source: |2

          wget --verbose \
               --method POST \
               --header 'Accept: application/json' \
               --header 'Content-Type: application/json' \
               --body-data {"$objectType":"lcm.v4.resources.NodePriorityConfig"} \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/config/node-priorities"
  /lcm/v4.0.a1/resources/config/node_priority/{nodeUuid}:
    get:
      tags:
      - NodePriorityConfig
      summary: Get the node priority of a node by UUID
      description: Get node priority value of a node
      operationId: getNodePriority
      parameters:
      - name: nodeUuid
        in: path
        description: UUID of a node in the cluster
        required: true
        style: simple
        explode: false
        schema:
          pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
          type: string
      responses:
        200:
          description: Queried node priority information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetNodePriorityNodeApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetNodePriorityNodeApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetNodePriorityNodeApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.NodePriorityConfigApi;\nimport com.nutanix.dp1.lcm.lcm.v4.resources.GetNodePriorityNodeApiResponse;\n\
          \npublic class JavaSdkSample {\n\tpublic static void main(String[] args)\
          \ {\n\t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tNodePriorityConfigApi nodePriorityConfigApi = new NodePriorityConfigApi(client);\n\
          \n\t\tString nodeUuid = \"^C7DdbEba-1E11-425c-92fF-C7128ccD13e2$\";\n\t\t\
          GetNodePriorityNodeApiResponse getNodePriorityNodeApiResponse = nodePriorityConfigApi.getNodePriority(nodeUuid);\n\
          \t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import NodePriorityConfigApi from "@nutanix/lcm-js-client/src/apis/NodePriorityConfig-endpoints";
          import GetNodePriorityNodeApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/GetNodePriorityNodeApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let nodePriorityConfigApi = new NodePriorityConfigApi(apiClientInstance);

          function sample() {
              let nodeUuid = "^cDD29DAa-D0cf-adBA-dFEc-1f11A6CDB617$";

              nodePriorityConfigApi.getNodePriority(nodeUuid).then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              nodePriorityConfigApi = ntnx_lcm_py_client.NodePriorityConfigApi(api_client=client)
              nodeUuid = "^DEafc8eD-e1Da-af29-892F-fD4eF0cfCCb4$"
              api_response = nodePriorityConfigApi.get_node_priority(nodeUuid)
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              NodePriorityConfigApiInstance *api.NodePriorityConfigApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              NodePriorityConfigApiInstance = api.NodePriorityConfigApi(ApiClientInstance)

              nodeUuid := "^847AFFAa-da8C-FbA8-b095-BDbFBB26bB1d$"

              response, _ := NodePriorityConfigApiInstance.GetNodePriority(nodeUuid)
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request GET \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/config/node_priority/^CdFc68e7-e7A2-2D2d-8b36-B3Af31Aa2B21$" \
               --header 'Accept: application/json' \
      - lang: Wget
        source: |2

          wget --verbose \
               --method GET \
               --header 'Accept: application/json' \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/config/node_priority/^Ba4BDCF9-c57e-CaD8-B6DB-F3a07FC78EEa$"
  /lcm/v4.0.a1/resources/entities/{uuid}:
    get:
      tags:
      - Entity
      summary: Get details about an LCM entity
      description: Get details about an LCM entity
      operationId: getEntity
      parameters:
      - name: uuid
        in: path
        description: UUID of the entity to be used
        required: true
        style: simple
        explode: false
        schema:
          pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
          type: string
      responses:
        200:
          description: Details of the queried LCM entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetEntityApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetEntityApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetEntityApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.EntityApi;\nimport com.nutanix.dp1.lcm.lcm.v4.resources.GetEntityApiResponse;\n\
          \npublic class JavaSdkSample {\n\tpublic static void main(String[] args)\
          \ {\n\t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tEntityApi entityApi = new EntityApi(client);\n\n\t\tString uuid\
          \ = \"^00Fe1DA8-AFA3-E280-251B-45baEc951bc1$\";\n\t\tGetEntityApiResponse\
          \ getEntityApiResponse = entityApi.getEntity(uuid);\n\t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import EntityApi from "@nutanix/lcm-js-client/src/apis/Entity-endpoints";
          import GetEntityApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/GetEntityApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let entityApi = new EntityApi(apiClientInstance);

          function sample() {
              let uuid = "^1Ca4Be0d-8AfB-4AfA-BC9a-dFbeee53AEe6$";

              entityApi.getEntity(uuid).then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              entityApi = ntnx_lcm_py_client.EntityApi(api_client=client)
              uuid = "^173ebfe2-cD86-4edf-aAd6-a6e3B3FeE6bB$"
              api_response = entityApi.get_entity(uuid)
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              EntityApiInstance *api.EntityApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              EntityApiInstance = api.EntityApi(ApiClientInstance)

              uuid := "^FeaBbBc5-dbe6-7E79-2A5b-980bAbFbC7fb$"

              response, _ := EntityApiInstance.GetEntity(uuid)
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request GET \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/entities/^A6ed21eC-C5d0-EeCE-a308-eCF12f6DdEee$" \
               --header 'Accept: application/json' \
      - lang: Wget
        source: |2

          wget --verbose \
               --method GET \
               --header 'Accept: application/json' \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/entities/^4AF5fE1B-Ddf7-DDCF-cfce-aEbEcfce2aD9$"
  /lcm/v4.0.a1/resources/entities:
    get:
      tags:
      - Entity
      summary: Get details about all LCM entities
      description: Query list of LCM entities
      operationId: getEntities
      parameters:
      - name: $page
        in: query
        description: |
          A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages would be set to the last page.
        required: false
        style: form
        explode: false
        schema:
          minimum: 0
          type: integer
          description: |
            A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages would be set to the last page.
          format: int32
          default: 0
      - name: $limit
        in: query
        description: |
          A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 100. Any number out of this range will be set to the default maximum number of records, which is 100.
        required: false
        style: form
        explode: false
        schema:
          maximum: 100
          type: integer
          description: |
            A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 100. Any number out of this range will be set to the default maximum number of records, which is 100.
          format: int32
          default: 50
      - name: $filter
        in: query
        description: |
          A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the OData V4.01 URL conventions.
          The filter can be applied on the following fields:
          - entityClass
          - entityModel
          - entityType
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: Paginated list of LCM entities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetEntitiesApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetEntitiesApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetEntitiesApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.EntityApi;\nimport com.nutanix.dp1.lcm.lcm.v4.resources.GetEntitiesApiResponse;\n\
          \npublic class JavaSdkSample {\n\tpublic static void main(String[] args)\
          \ {\n\t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tEntityApi entityApi = new EntityApi(client);\n\n\t\tint $page\
          \ = 0;\n\t\tint $limit = 50;\n\t\tString $filter = \"string_sample_data\"\
          ;\n\t\tGetEntitiesApiResponse getEntitiesApiResponse = entityApi.getEntities($page,\
          \ $limit, $filter);\n\t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import EntityApi from "@nutanix/lcm-js-client/src/apis/Entity-endpoints";
          import GetEntitiesApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/GetEntitiesApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let entityApi = new EntityApi(apiClientInstance);

          function sample() {
              let $page = 0;
              let $limit = 50;
              let $filter = "string_sample_data";

              entityApi.getEntities($page, $limit, $filter).then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              entityApi = ntnx_lcm_py_client.EntityApi(api_client=client)
              $page = 0
              $limit = 50
              $filter = "string_sample_data"
              api_response = entityApi.get_entities($page, $limit, $filter)
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              EntityApiInstance *api.EntityApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              EntityApiInstance = api.EntityApi(ApiClientInstance)

              $page := 0
              $limit := 50
              $filter := "string_sample_data"

              response, _ := EntityApiInstance.GetEntities($page, $limit, $filter)
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request GET \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/entities?$filter=string_sample_data&$limit=50&$page=0" \
               --header 'Accept: application/json' \
      - lang: Wget
        source: |2

          wget --verbose \
               --method GET \
               --header 'Accept: application/json' \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/entities?$filter=string_sample_data&$limit=50&$page=0"
  /lcm/v4.0.a1/resources/history/{uuid}:
    get:
      tags:
      - History
      summary: Get history of a specific LCM operation on this cluster
      description: Get LCM operation history for a specified UUID
      operationId: getHistoryByUuid
      parameters:
      - name: uuid
        in: path
        description: UUID of an LCM operation
        required: true
        style: simple
        explode: false
        schema:
          pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
          type: string
      responses:
        200:
          description: Details about the LCM operation history queried by UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetHistoryByUuidApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetHistoryByUuidApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetHistoryByUuidApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.HistoryApi;\nimport com.nutanix.dp1.lcm.lcm.v4.resources.GetHistoryByUuidApiResponse;\n\
          \npublic class JavaSdkSample {\n\tpublic static void main(String[] args)\
          \ {\n\t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tHistoryApi historyApi = new HistoryApi(client);\n\n\t\tString\
          \ uuid = \"^0f89F2ba-cB7D-0AdF-0C88-2CDFCcedaeA7$\";\n\t\tGetHistoryByUuidApiResponse\
          \ getHistoryByUuidApiResponse = historyApi.getHistoryByUuid(uuid);\n\t}\n\
          }\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import HistoryApi from "@nutanix/lcm-js-client/src/apis/History-endpoints";
          import GetHistoryByUuidApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/GetHistoryByUuidApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let historyApi = new HistoryApi(apiClientInstance);

          function sample() {
              let uuid = "^edCBa8BE-db46-dBAe-cbEF-EdF7FD698BF9$";

              historyApi.getHistoryByUuid(uuid).then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              historyApi = ntnx_lcm_py_client.HistoryApi(api_client=client)
              uuid = "^eAedBdff-eeAe-CFBC-6bB3-Ca2e8AB97aAC$"
              api_response = historyApi.get_history_by_uuid(uuid)
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              HistoryApiInstance *api.HistoryApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              HistoryApiInstance = api.HistoryApi(ApiClientInstance)

              uuid := "^b2ef88c6-ED4A-E8Fa-A5d0-6Ee6EABb2AbB$"

              response, _ := HistoryApiInstance.GetHistoryByUuid(uuid)
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request GET \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/history/^d58E6dCa-aEd5-F7d6-5f1d-ebD596EB1Db4$" \
               --header 'Accept: application/json' \
      - lang: Wget
        source: |2

          wget --verbose \
               --method GET \
               --header 'Accept: application/json' \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/history/^beBf806B-Ccfc-0f35-ee03-9dbDA4ff716B$"
  /lcm/v4.0.a1/resources/history:
    get:
      tags:
      - History
      summary: Get history of all LCM operations on this cluster
      description: Get history of LCM operations
      operationId: getHistory
      parameters:
      - name: $page
        in: query
        description: |
          A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages would be set to the last page.
        required: false
        style: form
        explode: false
        schema:
          minimum: 0
          type: integer
          description: |
            A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages would be set to the last page.
          format: int32
          default: 0
      - name: $limit
        in: query
        description: |
          A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 100. Any number out of this range will be set to the default maximum number of records, which is 100.
        required: false
        style: form
        explode: false
        schema:
          maximum: 100
          type: integer
          description: |
            A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 100. Any number out of this range will be set to the default maximum number of records, which is 100.
          format: int32
          default: 50
      - name: $filter
        in: query
        description: |
          A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the OData V4.01 URL conventions.
          The filter can be applied on the following fields:
          - operationId
          - operationType
          - startTime
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: Details about the history of LCM operations
          headers:
            Location:
              style: simple
              explode: false
              schema:
                pattern: ^((http[s]?):\/)?\/?([^:\/\s]+)((\/\w+)*(:[0-9]+)*?\/)([\w\-\.]+[^#?\s]+)(.*)?(#[\w\-]+)?$
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetHistoryApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetHistoryApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetHistoryApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.HistoryApi;\nimport com.nutanix.dp1.lcm.lcm.v4.resources.GetHistoryApiResponse;\n\
          \npublic class JavaSdkSample {\n\tpublic static void main(String[] args)\
          \ {\n\t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tHistoryApi historyApi = new HistoryApi(client);\n\n\t\tint $page\
          \ = 0;\n\t\tint $limit = 50;\n\t\tString $filter = \"string_sample_data\"\
          ;\n\t\tGetHistoryApiResponse getHistoryApiResponse = historyApi.getHistory($page,\
          \ $limit, $filter);\n\t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import HistoryApi from "@nutanix/lcm-js-client/src/apis/History-endpoints";
          import GetHistoryApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/GetHistoryApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let historyApi = new HistoryApi(apiClientInstance);

          function sample() {
              let $page = 0;
              let $limit = 50;
              let $filter = "string_sample_data";

              historyApi.getHistory($page, $limit, $filter).then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              historyApi = ntnx_lcm_py_client.HistoryApi(api_client=client)
              $page = 0
              $limit = 50
              $filter = "string_sample_data"
              api_response = historyApi.get_history($page, $limit, $filter)
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              HistoryApiInstance *api.HistoryApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              HistoryApiInstance = api.HistoryApi(ApiClientInstance)

              $page := 0
              $limit := 50
              $filter := "string_sample_data"

              response, _ := HistoryApiInstance.GetHistory($page, $limit, $filter)
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request GET \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/history?$filter=string_sample_data&$limit=50&$page=0" \
               --header 'Accept: application/json' \
      - lang: Wget
        source: |2

          wget --verbose \
               --method GET \
               --header 'Accept: application/json' \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/history?$filter=string_sample_data&$limit=50&$page=0"
  /lcm/v4.0.a1/resources/images:
    get:
      tags:
      - Images
      summary: Get the list of downloaded LCM images
      description: Get the list of downloaded LCM images
      operationId: getImages
      parameters:
      - name: $page
        in: query
        description: |
          A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages would be set to the last page.
        required: false
        style: form
        explode: false
        schema:
          minimum: 0
          type: integer
          description: |
            A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages would be set to the last page.
          format: int32
          default: 0
      - name: $limit
        in: query
        description: |
          A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 100. Any number out of this range will be set to the default maximum number of records, which is 100.
        required: false
        style: form
        explode: false
        schema:
          maximum: 100
          type: integer
          description: |
            A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 100. Any number out of this range will be set to the default maximum number of records, which is 100.
          format: int32
          default: 50
      - name: $filter
        in: query
        description: |
          A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the OData V4.01 URL conventions.
          The filter can be applied on the following fields:
          - entityClass
          - entityModel
          - hardwareFamily
          - version
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: Get a list of LCM images
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetImagesApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetImagesApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetImagesApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.ImagesApi;\nimport com.nutanix.dp1.lcm.lcm.v4.resources.GetImagesApiResponse;\n\
          \npublic class JavaSdkSample {\n\tpublic static void main(String[] args)\
          \ {\n\t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tImagesApi imagesApi = new ImagesApi(client);\n\n\t\tint $page\
          \ = 0;\n\t\tint $limit = 50;\n\t\tString $filter = \"string_sample_data\"\
          ;\n\t\tGetImagesApiResponse getImagesApiResponse = imagesApi.getImages($page,\
          \ $limit, $filter);\n\t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import ImagesApi from "@nutanix/lcm-js-client/src/apis/Images-endpoints";
          import GetImagesApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/GetImagesApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let imagesApi = new ImagesApi(apiClientInstance);

          function sample() {
              let $page = 0;
              let $limit = 50;
              let $filter = "string_sample_data";

              imagesApi.getImages($page, $limit, $filter).then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              imagesApi = ntnx_lcm_py_client.ImagesApi(api_client=client)
              $page = 0
              $limit = 50
              $filter = "string_sample_data"
              api_response = imagesApi.get_images($page, $limit, $filter)
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              ImagesApiInstance *api.ImagesApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              ImagesApiInstance = api.ImagesApi(ApiClientInstance)

              $page := 0
              $limit := 50
              $filter := "string_sample_data"

              response, _ := ImagesApiInstance.GetImages($page, $limit, $filter)
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request GET \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/images?$filter=string_sample_data&$limit=50&$page=0" \
               --header 'Accept: application/json' \
      - lang: Wget
        source: |2

          wget --verbose \
               --method GET \
               --header 'Accept: application/json' \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/images?$filter=string_sample_data&$limit=50&$page=0"
  /lcm/v4.0.a1/resources/status:
    get:
      tags:
      - Status
      summary: Get the LCM framework status
      description: Get the LCM framework status
      operationId: getStatus
      responses:
        200:
          description: Queried status of LCM framework
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetLcmStatusApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetLcmStatusApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetLcmStatusApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.StatusApi;\nimport com.nutanix.dp1.lcm.lcm.v4.resources.GetLcmStatusApiResponse;\n\
          \npublic class JavaSdkSample {\n\tpublic static void main(String[] args)\
          \ {\n\t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tStatusApi statusApi = new StatusApi(client);\n\n\t\tGetLcmStatusApiResponse\
          \ getLcmStatusApiResponse = statusApi.getStatus();\n\t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import StatusApi from "@nutanix/lcm-js-client/src/apis/Status-endpoints";
          import GetLcmStatusApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/GetLcmStatusApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let statusApi = new StatusApi(apiClientInstance);

          function sample() {

              statusApi.getStatus().then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              statusApi = ntnx_lcm_py_client.StatusApi(api_client=client)
              api_response = statusApi.get_status()
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              StatusApiInstance *api.StatusApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              StatusApiInstance = api.StatusApi(ApiClientInstance)


              response, _ := StatusApiInstance.GetStatus()
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request GET \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/status" \
               --header 'Accept: application/json' \
      - lang: Wget
        source: |2

          wget --verbose \
               --method GET \
               --header 'Accept: application/json' \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/status"
  /lcm/v4.0.a1/resources/logbay/tags:
    get:
      tags:
      - LogBay
      summary: Get Logbay tags used for collecting LCM logs
      description: Get NCC Logbay tags used for collecting LCM logs
      operationId: getLogbayTags
      parameters:
      - name: $page
        in: query
        description: |
          A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages would be set to the last page.
        required: false
        style: form
        explode: false
        schema:
          minimum: 0
          type: integer
          description: |
            A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages would be set to the last page.
          format: int32
          default: 0
      - name: $limit
        in: query
        description: |
          A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 100. Any number out of this range will be set to the default maximum number of records, which is 100.
        required: false
        style: form
        explode: false
        schema:
          maximum: 100
          type: integer
          description: |
            A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 100. Any number out of this range will be set to the default maximum number of records, which is 100.
          format: int32
          default: 50
      responses:
        200:
          description: NCC Logbay tags used for LCM log collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetLogBayTagsApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetLogBayTagsApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetLogBayTagsApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.LogBayApi;\nimport com.nutanix.dp1.lcm.lcm.v4.resources.GetLogBayTagsApiResponse;\n\
          \npublic class JavaSdkSample {\n\tpublic static void main(String[] args)\
          \ {\n\t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tLogBayApi logBayApi = new LogBayApi(client);\n\n\t\tint $page\
          \ = 0;\n\t\tint $limit = 50;\n\t\tGetLogBayTagsApiResponse getLogBayTagsApiResponse\
          \ = logBayApi.getLogbayTags($page, $limit);\n\t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import LogBayApi from "@nutanix/lcm-js-client/src/apis/LogBay-endpoints";
          import GetLogBayTagsApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/GetLogBayTagsApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let logBayApi = new LogBayApi(apiClientInstance);

          function sample() {
              let $page = 0;
              let $limit = 50;

              logBayApi.getLogbayTags($page, $limit).then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              logBayApi = ntnx_lcm_py_client.LogBayApi(api_client=client)
              $page = 0
              $limit = 50
              api_response = logBayApi.get_logbay_tags($page, $limit)
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              LogBayApiInstance *api.LogBayApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              LogBayApiInstance = api.LogBayApi(ApiClientInstance)

              $page := 0
              $limit := 50

              response, _ := LogBayApiInstance.GetLogbayTags($page, $limit)
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request GET \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/logbay/tags?$limit=50&$page=0" \
               --header 'Accept: application/json' \
      - lang: Wget
        source: |2

          wget --verbose \
               --method GET \
               --header 'Accept: application/json' \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/logbay/tags?$limit=50&$page=0"
  /lcm/v4.0.a1/resources/logbay/items:
    get:
      tags:
      - LogBay
      summary: Get Logbay items needed for collecting LCM logs
      description: Get NCC Logbay items needed for collecting LCM logs
      operationId: getLogbayItems
      parameters:
      - name: $page
        in: query
        description: |
          A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages would be set to the last page.
        required: false
        style: form
        explode: false
        schema:
          minimum: 0
          type: integer
          description: |
            A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages would be set to the last page.
          format: int32
          default: 0
      - name: $limit
        in: query
        description: |
          A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 100. Any number out of this range will be set to the default maximum number of records, which is 100.
        required: false
        style: form
        explode: false
        schema:
          maximum: 100
          type: integer
          description: |
            A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 100. Any number out of this range will be set to the default maximum number of records, which is 100.
          format: int32
          default: 50
      responses:
        200:
          description: NCC Logbay items used for LCM log collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetLogBayItemsApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetLogBayItemsApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetLogBayItemsApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.LogBayApi;\nimport com.nutanix.dp1.lcm.lcm.v4.resources.GetLogBayItemsApiResponse;\n\
          \npublic class JavaSdkSample {\n\tpublic static void main(String[] args)\
          \ {\n\t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tLogBayApi logBayApi = new LogBayApi(client);\n\n\t\tint $page\
          \ = 0;\n\t\tint $limit = 50;\n\t\tGetLogBayItemsApiResponse getLogBayItemsApiResponse\
          \ = logBayApi.getLogbayItems($page, $limit);\n\t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import LogBayApi from "@nutanix/lcm-js-client/src/apis/LogBay-endpoints";
          import GetLogBayItemsApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/GetLogBayItemsApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let logBayApi = new LogBayApi(apiClientInstance);

          function sample() {
              let $page = 0;
              let $limit = 50;

              logBayApi.getLogbayItems($page, $limit).then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              logBayApi = ntnx_lcm_py_client.LogBayApi(api_client=client)
              $page = 0
              $limit = 50
              api_response = logBayApi.get_logbay_items($page, $limit)
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              LogBayApiInstance *api.LogBayApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              LogBayApiInstance = api.LogBayApi(ApiClientInstance)

              $page := 0
              $limit := 50

              response, _ := LogBayApiInstance.GetLogbayItems($page, $limit)
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request GET \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/logbay/items?$limit=50&$page=0" \
               --header 'Accept: application/json' \
      - lang: Wget
        source: |2

          wget --verbose \
               --method GET \
               --header 'Accept: application/json' \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/logbay/items?$limit=50&$page=0"
  /lcm/v4.0.a1/resources/moduleConfig:
    get:
      tags:
      - ModuleConfig
      summary: Get LCM module configuration
      description: Get LCM module configuration
      operationId: getModuleConfig
      responses:
        200:
          description: Details of the retrieved LCM module configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetModuleConfigApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetModuleConfigApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetModuleConfigApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.ModuleConfigApi;\nimport com.nutanix.dp1.lcm.lcm.v4.resources.GetModuleConfigApiResponse;\n\
          \npublic class JavaSdkSample {\n\tpublic static void main(String[] args)\
          \ {\n\t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tModuleConfigApi moduleConfigApi = new ModuleConfigApi(client);\n\
          \n\t\tGetModuleConfigApiResponse getModuleConfigApiResponse = moduleConfigApi.getModuleConfig();\n\
          \t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import ModuleConfigApi from "@nutanix/lcm-js-client/src/apis/ModuleConfig-endpoints";
          import GetModuleConfigApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/GetModuleConfigApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let moduleConfigApi = new ModuleConfigApi(apiClientInstance);

          function sample() {

              moduleConfigApi.getModuleConfig().then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              moduleConfigApi = ntnx_lcm_py_client.ModuleConfigApi(api_client=client)
              api_response = moduleConfigApi.get_module_config()
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              ModuleConfigApiInstance *api.ModuleConfigApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              ModuleConfigApiInstance = api.ModuleConfigApi(ApiClientInstance)


              response, _ := ModuleConfigApiInstance.GetModuleConfig()
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request GET \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/moduleConfig" \
               --header 'Accept: application/json' \
      - lang: Wget
        source: |2

          wget --verbose \
               --method GET \
               --header 'Accept: application/json' \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/moduleConfig"
    put:
      tags:
      - ModuleConfig
      summary: Update the LCM module configuration
      description: Update LCM module configuration
      operationId: setModuleConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lcm.v4.r0.a1.resources.ModuleConfig'
      responses:
        202:
          description: Details of the updated LCM module configuration
          headers:
            Location:
              style: simple
              explode: false
              schema:
                pattern: ^((http[s]?):\/)?\/?([^:\/\s]+)((\/\w+)*(:[0-9]+)*?\/)([\w\-\.]+[^#?\s]+)(.*)?(#[\w\-]+)?$
                type: string
                description: Indicates the target of a redirection or the URL of a
                  newly created resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.PutModuleConfigApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.PutModuleConfigApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.PutModuleConfigApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.ModuleConfigApi;\nimport com.nutanix.dp1.lcm.lcm.v4.resources.ModuleConfig;\n\
          import com.nutanix.dp1.lcm.lcm.v4.resources.PutModuleConfigApiResponse;\n\
          \npublic class JavaSdkSample {\n\tpublic static void main(String[] args)\
          \ {\n\t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tModuleConfigApi moduleConfigApi = new ModuleConfigApi(client);\n\
          \n\t\tModuleConfig moduleConfig = new ModuleConfig();\n\n\t\t// ModuleConfig\
          \ object initializations here...\n\n\t\tPutModuleConfigApiResponse putModuleConfigApiResponse\
          \ = moduleConfigApi.setModuleConfig(moduleConfig);\n\t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import ModuleConfigApi from "@nutanix/lcm-js-client/src/apis/ModuleConfig-endpoints";
          import ModuleConfig from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/ModuleConfig";
          import PutModuleConfigApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/PutModuleConfigApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let moduleConfigApi = new ModuleConfigApi(apiClientInstance);

          function sample() {
              let moduleConfig = new ModuleConfig();

              // ModuleConfig object initializations here...


              moduleConfigApi.setModuleConfig(moduleConfig, ).then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              moduleConfigApi = ntnx_lcm_py_client.ModuleConfigApi(api_client=client)
              moduleConfig = ntnx_lcm_py_client.ModuleConfig()

              # ModuleConfig object initializations here...

              api_response = moduleConfigApi.set_module_config(moduleConfig)
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              import1 "nutanix/lcm-go-client/models/lcm/v4/defaultapi"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              ModuleConfigApiInstance *api.ModuleConfigApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              ModuleConfigApiInstance = api.ModuleConfigApi(ApiClientInstance)

              moduleConfig := import1.newModuleConfig()

              // ModuleConfig object initializations here...


              response, _ := ModuleConfigApiInstance.SetModuleConfig(moduleConfig)
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request PUT \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/moduleConfig" \
               --header 'Accept: application/json' \
               --header 'Content-Type: application/json' \
               --data {"redfishDisabled":true,"rimParams":[{"url":"string","path":"string","component":"string","tags":["string"],"flags":["string"],"description":"string","urlSetByUser":true,"$objectType":"lcm.v4.resources.RimParams"}],"$objectType":"lcm.v4.resources.ModuleConfig"} \
      - lang: Wget
        source: |2

          wget --verbose \
               --method PUT \
               --header 'Accept: application/json' \
               --header 'Content-Type: application/json' \
               --body-data {"redfishDisabled":true,"rimParams":[{"url":"string","path":"string","component":"string","tags":["string"],"flags":["string"],"description":"string","urlSetByUser":true,"$objectType":"lcm.v4.resources.RimParams"}],"$objectType":"lcm.v4.resources.ModuleConfig"} \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/moduleConfig"
  /lcm/v4.0.a1/resources/plan:
    post:
      tags:
      - Plan
      summary: Generate an upgrade plan that specifies the impact of the upgrade on
        the cluster
      description: Generate an LCM upgrade plan
      operationId: getPlan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lcm.v4.r0.a1.common.EntityUpdateSpecs'
      responses:
        201:
          description: LCM upgrade plan generated
          headers:
            Location:
              style: simple
              explode: false
              schema:
                pattern: ^((http[s]?):\/)?\/?([^:\/\s]+)((\/\w+)*(:[0-9]+)*?\/)([\w\-\.]+[^#?\s]+)(.*)?(#[\w\-]+)?$
                type: string
                description: Indicates the target of a redirection or the URL of a
                  newly created resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GenUpgradePlanApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GenUpgradePlanApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GenUpgradePlanApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.PlanApi;\nimport com.nutanix.dp1.lcm.lcm.v4.common.EntityUpdateSpecs;\n\
          import com.nutanix.dp1.lcm.lcm.v4.resources.GenUpgradePlanApiResponse;\n\
          \npublic class JavaSdkSample {\n\tpublic static void main(String[] args)\
          \ {\n\t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tPlanApi planApi = new PlanApi(client);\n\n\t\tEntityUpdateSpecs\
          \ entityUpdateSpecs = new EntityUpdateSpecs();\n\n\t\t// EntityUpdateSpecs\
          \ object initializations here...\n\n\t\tGenUpgradePlanApiResponse genUpgradePlanApiResponse\
          \ = planApi.getPlan(entityUpdateSpecs);\n\t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import PlanApi from "@nutanix/lcm-js-client/src/apis/Plan-endpoints";
          import EntityUpdateSpecs from "@nutanix/lcm-js-client/src/models/lcm/v4/common/EntityUpdateSpecs";
          import GenUpgradePlanApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/GenUpgradePlanApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let planApi = new PlanApi(apiClientInstance);

          function sample() {
              let entityUpdateSpecs = new EntityUpdateSpecs();

              // EntityUpdateSpecs object initializations here...


              planApi.getPlan(entityUpdateSpecs, ).then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              planApi = ntnx_lcm_py_client.PlanApi(api_client=client)
              entityUpdateSpecs = ntnx_lcm_py_client.EntityUpdateSpecs()

              # EntityUpdateSpecs object initializations here...

              api_response = planApi.get_plan(entityUpdateSpecs)
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              import1 "nutanix/lcm-go-client/models/lcm/v4/defaultapi"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              PlanApiInstance *api.PlanApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              PlanApiInstance = api.PlanApi(ApiClientInstance)

              entityUpdateSpecs := import1.newEntityUpdateSpecs()

              // EntityUpdateSpecs object initializations here...


              response, _ := PlanApiInstance.GetPlan(entityUpdateSpecs)
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request POST \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/plan" \
               --header 'Accept: application/json' \
               --header 'Content-Type: application/json' \
               --data {"entityUpdateSpecs":[{"entityUuid":"string","version":"string","$objectType":"lcm.v4.common.EntityUpdateSpec"}],"$objectType":"lcm.v4.common.EntityUpdateSpecs"} \
      - lang: Wget
        source: |2

          wget --verbose \
               --method POST \
               --header 'Accept: application/json' \
               --header 'Content-Type: application/json' \
               --body-data {"entityUpdateSpecs":[{"entityUuid":"string","version":"string","$objectType":"lcm.v4.common.EntityUpdateSpec"}],"$objectType":"lcm.v4.common.EntityUpdateSpecs"} \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/plan"
  /lcm/v4.0.a1/resources/recommendations:
    post:
      tags:
      - Recommendations
      summary: Get a list of update recommendations from LCM
      description: Get LCM update recommendations
      operationId: getRecommendations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lcm.v4.r0.a1.resources.RecommendationSpec'
      responses:
        201:
          description: LCM update recommendations generated as per the input request
          headers:
            Location:
              style: simple
              explode: false
              schema:
                pattern: ^((http[s]?):\/)?\/?([^:\/\s]+)((\/\w+)*(:[0-9]+)*?\/)([\w\-\.]+[^#?\s]+)(.*)?(#[\w\-]+)?$
                type: string
                description: Indicates the target of a redirection or the URL of a
                  newly created resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetUpdateRecApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetUpdateRecApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetUpdateRecApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.RecommendationsApi;\nimport com.nutanix.dp1.lcm.lcm.v4.resources.RecommendationSpec;\n\
          import com.nutanix.dp1.lcm.lcm.v4.resources.GetUpdateRecApiResponse;\n\n\
          public class JavaSdkSample {\n\tpublic static void main(String[] args) {\n\
          \t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tRecommendationsApi recommendationsApi = new RecommendationsApi(client);\n\
          \n\t\tRecommendationSpec recommendationSpec = new RecommendationSpec();\n\
          \n\t\t// RecommendationSpec object initializations here...\n\n\t\tGetUpdateRecApiResponse\
          \ getUpdateRecApiResponse = recommendationsApi.getRecommendations(recommendationSpec);\n\
          \t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import RecommendationsApi from "@nutanix/lcm-js-client/src/apis/Recommendations-endpoints";
          import RecommendationSpec from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/RecommendationSpec";
          import GetUpdateRecApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/GetUpdateRecApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let recommendationsApi = new RecommendationsApi(apiClientInstance);

          function sample() {
              let recommendationSpec = new RecommendationSpec();

              // RecommendationSpec object initializations here...


              recommendationsApi.getRecommendations(recommendationSpec, ).then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              recommendationsApi = ntnx_lcm_py_client.RecommendationsApi(api_client=client)
              recommendationSpec = ntnx_lcm_py_client.RecommendationSpec()

              # RecommendationSpec object initializations here...

              api_response = recommendationsApi.get_recommendations(recommendationSpec)
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              import1 "nutanix/lcm-go-client/models/lcm/v4/defaultapi"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              RecommendationsApiInstance *api.RecommendationsApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              RecommendationsApiInstance = api.RecommendationsApi(ApiClientInstance)

              recommendationSpec := import1.newRecommendationSpec()

              // RecommendationSpec object initializations here...


              response, _ := RecommendationsApiInstance.GetRecommendations(recommendationSpec)
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request POST \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/recommendations" \
               --header 'Accept: application/json' \
               --header 'Content-Type: application/json' \
               --data {"entityTypes":["$UNKNOWN"],"targetEntities":[{"entityClass":"string","entityModel":"string","locationId":"string","id":"string","version":"string","$objectType":"lcm.v4.resources.TargetEntity"}],"entityUpdateSpecs":[{"entityUuid":"string","version":"string","$objectType":"lcm.v4.common.EntityUpdateSpec"}],"entityDeploySpecs":[{"entityClass":"string","entityModel":"string","hardwareFamily":"string","$objectType":"lcm.v4.common.EntityIdentifierSpec"}],"$objectType":"lcm.v4.resources.RecommendationSpec"} \
      - lang: Wget
        source: |2

          wget --verbose \
               --method POST \
               --header 'Accept: application/json' \
               --header 'Content-Type: application/json' \
               --body-data {"entityTypes":["$UNKNOWN"],"targetEntities":[{"entityClass":"string","entityModel":"string","locationId":"string","id":"string","version":"string","$objectType":"lcm.v4.resources.TargetEntity"}],"entityUpdateSpecs":[{"entityUuid":"string","version":"string","$objectType":"lcm.v4.common.EntityUpdateSpec"}],"entityDeploySpecs":[{"entityClass":"string","entityModel":"string","hardwareFamily":"string","$objectType":"lcm.v4.common.EntityIdentifierSpec"}],"$objectType":"lcm.v4.resources.RecommendationSpec"} \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/recommendations"
  /lcm/v4.0.a1/resources/tasks/{uuid}:
    get:
      tags:
      - Task
      summary: Get details of an LCM task identified by the UUID
      description: Get details of an LCM task identified by the UUID
      operationId: getTaskByUuid
      parameters:
      - name: uuid
        in: path
        description: UUID of LCM task
        required: true
        style: simple
        explode: false
        schema:
          pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
          type: string
      responses:
        201:
          description: LCM task information for the given UUID
          headers:
            Location:
              style: simple
              explode: false
              schema:
                pattern: ^((http[s]?):\/)?\/?([^:\/\s]+)((\/\w+)*(:[0-9]+)*?\/)([\w\-\.]+[^#?\s]+)(.*)?(#[\w\-]+)?$
                type: string
                description: Indicates the target of a redirection or the URL of a
                  newly created resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetTaskByUuidApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetTaskByUuidApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GetTaskByUuidApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.TaskApi;\nimport com.nutanix.dp1.lcm.lcm.v4.resources.GetTaskByUuidApiResponse;\n\
          \npublic class JavaSdkSample {\n\tpublic static void main(String[] args)\
          \ {\n\t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tTaskApi taskApi = new TaskApi(client);\n\n\t\tString uuid = \"\
          ^2EcEAFFb-CFEd-b73d-801e-AC5a1aB8dBc2$\";\n\t\tGetTaskByUuidApiResponse\
          \ getTaskByUuidApiResponse = taskApi.getTaskByUuid(uuid);\n\t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import TaskApi from "@nutanix/lcm-js-client/src/apis/Task-endpoints";
          import GetTaskByUuidApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/GetTaskByUuidApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let taskApi = new TaskApi(apiClientInstance);

          function sample() {
              let uuid = "^FEfea3ec-AAdB-E6cA-BD2c-E7AfBeE3aAb9$";

              taskApi.getTaskByUuid(uuid).then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              taskApi = ntnx_lcm_py_client.TaskApi(api_client=client)
              uuid = "^CDfEAEd9-f45F-FBb4-Bc4f-AC97Ab9bb9A9$"
              api_response = taskApi.get_task_by_uuid(uuid)
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              TaskApiInstance *api.TaskApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              TaskApiInstance = api.TaskApi(ApiClientInstance)

              uuid := "^A7badfAa-E2eE-fBdc-dDbD-A3F3216D3feb$"

              response, _ := TaskApiInstance.GetTaskByUuid(uuid)
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request GET \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/tasks/^9fecaC60-dCF0-A96c-1Bc0-A9EfabEc3B4C$" \
               --header 'Accept: application/json' \
      - lang: Wget
        source: |2

          wget --verbose \
               --method GET \
               --header 'Accept: application/json' \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/tasks/^E6Efe4be-fdcD-C058-EeDF-B00de1717B38$"
  /lcm/v4.0.a1/resources/notifications:
    post:
      tags:
      - Notifications
      summary: Generate LCM upgrade notifications
      description: Generate LCM upgrade notifications
      operationId: GenUpgradeNotifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lcm.v4.r0.a1.common.EntityUpdateSpecs'
      responses:
        201:
          description: Details of the generated LCM upgrade notifications
          headers:
            Location:
              style: simple
              explode: false
              schema:
                pattern: ^((http[s]?):\/)?\/?([^:\/\s]+)((\/\w+)*(:[0-9]+)*?\/)([\w\-\.]+[^#?\s]+)(.*)?(#[\w\-]+)?$
                type: string
                description: Indicates the target of a redirection or the URL of a
                  newly created resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GenUpgradeNotifApiResponse'
        4XX:
          description: Client error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GenUpgradeNotifApiResponse'
        5XX:
          description: Server error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lcm.v4.r0.a1.resources.GenUpgradeNotifApiResponse'
      x-code-samples:
      - lang: Java
        source: "\npackage sample;\n\nimport com.nutanix.lcm.java.client.ApiClient;\n\
          import com.nutanix.lcm.java.client.api.NotificationsApi;\nimport com.nutanix.dp1.lcm.lcm.v4.common.EntityUpdateSpecs;\n\
          import com.nutanix.dp1.lcm.lcm.v4.resources.GenUpgradeNotifApiResponse;\n\
          \npublic class JavaSdkSample {\n\tpublic static void main(String[] args)\
          \ {\n\t\tApiClient client = new ApiClient();\n\t\tclient.setHost(\"localhost\"\
          );\n\t\tclient.setPort(9440);\n\t\tclient.setRetryInterval(100);\n\t\tclient.setMaxRetryAttempts(2);\n\
          \t\tclient.setUsername(\"username\");\n\t\tclient.setPassword(\"password\"\
          );\n\n\t\tNotificationsApi notificationsApi = new NotificationsApi(client);\n\
          \n\t\tEntityUpdateSpecs entityUpdateSpecs = new EntityUpdateSpecs();\n\n\
          \t\t// EntityUpdateSpecs object initializations here...\n\n\t\tGenUpgradeNotifApiResponse\
          \ genUpgradeNotifApiResponse = notificationsApi.GenUpgradeNotifications(entityUpdateSpecs);\n\
          \t}\n}\n"
      - lang: JavaScript
        source: |2

          import ApiClient from "@nutanix/lcm-js-client/src/ApiClient";
          import NotificationsApi from "@nutanix/lcm-js-client/src/apis/Notifications-endpoints";
          import EntityUpdateSpecs from "@nutanix/lcm-js-client/src/models/lcm/v4/common/EntityUpdateSpecs";
          import GenUpgradeNotifApiResponse from "@nutanix/lcm-js-client/src/models/lcm/v4/resources/GenUpgradeNotifApiResponse";

          let apiClientInstance = new ApiClient();
          apiClientInstance.maxRetryAttempts = 2;
          apiClientInstance.retryInterval = 500;
          apiClientInstance.host = 'localhost'
          apiClientInstance.port = '9440';
          apiClientInstance.username = 'username';
          apiClientInstance.password = 'password';
          let notificationsApi = new NotificationsApi(apiClientInstance);

          function sample() {
              let entityUpdateSpecs = new EntityUpdateSpecs();

              // EntityUpdateSpecs object initializations here...


              notificationsApi.GenUpgradeNotifications(entityUpdateSpecs, ).then(({data, response}) =>
                  console.log(response.status);
                  console.log(data.getData());
                  done();
              }).catch((error) => {
                  console.log(error);
                  done(error);
              });
          }
      - lang: Python
        source: |2

          import ntnx_lcm_py_client

          if __name__ == "__main__":
              config = ntnx_lcm_py_client.configuration.Configuration()
              config.host = "localhost"
              config.port = 9440
              config.max_retry_attempts = 1
              config.backoff_factor = 3
              config.username = "username"
              config.password = "password"
              client = ntnx_lcm_py_client.ApiClient(configuration=config)
              notificationsApi = ntnx_lcm_py_client.NotificationsApi(api_client=client)
              entityUpdateSpecs = ntnx_lcm_py_client.EntityUpdateSpecs()

              # EntityUpdateSpecs object initializations here...

              api_response = notificationsApi.gen_upgrade_notifications(entityUpdateSpecs)
      - lang: Go
        source: |2+

          package main

          import {
              "fmt"
              import1 "nutanix/lcm-go-client/models/lcm/v4/defaultapi"
              "nutanix/lcm-go-client/v4/api"
              "nutanix/lcm-go-client/v4/client"
          }

          var (
              ApiClientInstance *client.ApiClient
              NotificationsApiInstance *api.NotificationsApi
          )

          func main() {
              ApiClientInstance = client.NewApiClient()
              ApiClientInstance.Host = "localhost"
              ApiClientInstance.Port = 9440
              ApiClientInstance.RetryInterval = 100
              ApiClientInstance.MaxRetryAttempts = 2
              ApiClientInstance.AllowVersionNegotiation = true
              ApiClientInstance.Username = "username"
              ApiClientInstance.Password = "password"

              NotificationsApiInstance = api.NotificationsApi(ApiClientInstance)

              entityUpdateSpecs := import1.newEntityUpdateSpecs()

              // EntityUpdateSpecs object initializations here...


              response, _ := NotificationsApiInstance.GenUpgradeNotifications(entityUpdateSpecs)
              fmt.Println(response)
          }

      - lang: cURL
        source: |2

          curl --request POST \
               --url "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/notifications" \
               --header 'Accept: application/json' \
               --header 'Content-Type: application/json' \
               --data {"entityUpdateSpecs":[{"entityUuid":"string","version":"string","$objectType":"lcm.v4.common.EntityUpdateSpec"}],"$objectType":"lcm.v4.common.EntityUpdateSpecs"} \
      - lang: Wget
        source: |2

          wget --verbose \
               --method POST \
               --header 'Accept: application/json' \
               --header 'Content-Type: application/json' \
               --body-data {"entityUpdateSpecs":[{"entityUuid":"string","version":"string","$objectType":"lcm.v4.common.EntityUpdateSpec"}],"$objectType":"lcm.v4.common.EntityUpdateSpecs"} \
               - "https://{pc-ip}:9440/api/lcm/v4.0.a1/resources/notifications"
components:
  schemas:
    lcm.v4.r0.a1.operations.CancelUpdateApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - $ref: '#/components/schemas/prism.v4.r0.a1.config.TaskReference'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/operations/$actions/cancelupdate
        Post operation
    lcm.v4.r0.a1.common.ImageDownloadSpecs:
      title: List of LCM images to download
      type: object
      properties:
        imageDownloadSpecs:
          minItems: 1
          type: array
          description: LCM image download specification
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.common.ImageDownloadSpec'
      additionalProperties: false
      description: List of LCM images to download
    lcm.v4.r0.a1.operations.GetDownloadApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - $ref: '#/components/schemas/prism.v4.r0.a1.config.TaskReference'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/operations/$actions/downloadImages
        Post operation
    lcm.v4.r0.a1.common.ImageDownloadSpec:
      title: LCM image download specification
      required:
      - entityClass
      - entityModel
      - version
      type: object
      properties:
        entityClass:
          type: string
          description: LCM entity class
        entityModel:
          type: string
          description: LCM entity model
        locationId:
          type: string
          description: The location of the LCM entity, it can be at the cluster level
            or at the node level, in the format of "cluster:uuid" or "node:uuid"
        version:
          type: string
          description: The requested update version of an LCM entity.
        entityUuid:
          type: string
          description: UUID of the entity to be used
        hardwareFamily:
          type: string
          description: A hardware family for a LCM entity
      additionalProperties: false
      description: LCM image download specification
    lcm.v4.r0.a1.operations.InventoryApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - $ref: '#/components/schemas/prism.v4.r0.a1.config.TaskReference'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/operations/$actions/performInventory
        Post operation
    lcm.v4.r0.a1.common.PrecheckSpec:
      title: Precheck specification
      type: object
      properties:
        managementServer:
          $ref: '#/components/schemas/lcm.v4.r0.a1.common.ManagementServer'
        entityUpdateSpecs:
          type: array
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.common.EntityUpdateSpec'
        skippedPrecheckFlags:
          type: array
          description: List of prechecks to skip. The allowed value is 'power_off_vm'
            that skips the pinned VM prechecks
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.common.SystemAutoMgmtFlag'
      additionalProperties: false
      description: Specification for running a Precheck operation
    lcm.v4.r0.a1.operations.PrecheckApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - $ref: '#/components/schemas/prism.v4.r0.a1.config.TaskReference'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/operations/$actions/performPrecheck
        Post operation
    lcm.v4.r0.a1.common.ManagementServer:
      title: Cluster management server configuration
      type: object
      properties:
        hypervisorType:
          $ref: '#/components/schemas/lcm.v4.r0.a1.common.HypervisorType'
        ip:
          pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
          type: string
          description: IP address of the management server
        username:
          type: string
          description: User name to login to the management server
        password:
          type: string
          description: Password to login to the management server
      additionalProperties: false
      description: Cluster management server configuration used while updating clusters
        with ESX or HyperV
    lcm.v4.r0.a1.common.EntityUpdateSpec:
      title: Entity update specification
      type: object
      properties:
        entityUuid:
          pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
          type: string
          description: UUID of the entity to be used
          format: UUID
        version:
          type: string
          description: Entity target version
      additionalProperties: false
      description: Specification for running an update operation
    lcm.v4.r0.a1.common.SystemAutoMgmtFlag:
      type: string
      description: System auto-management flag
      enum:
      - $UNKNOWN
      - $REDACTED
      - powerOffUvms
    lcm.v4.r0.a1.common.HypervisorType:
      type: string
      description: Type of hypervisor present in the cluster
      enum:
      - $UNKNOWN
      - $REDACTED
      - esx
      - ahv
      - hyperv
      - xenserver
      - none
    lcm.v4.r0.a1.common.UpdateSpec:
      title: Update specification
      type: object
      properties:
        managementServer:
          $ref: '#/components/schemas/lcm.v4.r0.a1.common.ManagementServer'
        entityUpdateSpecs:
          type: array
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.common.EntityUpdateSpec'
        skippedPrecheckFlags:
          type: array
          description: List of prechecks to skip. The allowed value is 'power_off_vm'
            that skips the pinned VM prechecks
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.common.SystemAutoMgmtFlag'
        autoHandleFlags:
          type: array
          description: 'List of automated system operations to perform, to avoid precheck
            failure and let the system restore state after an update is complete.
            The allowed flag is: - ''power_off_vm'': This allows the system to automatically
            power off user VMs which cannot be migrated to other hosts and power them
            on when the update is done. This option can avoid pinned VM precheck failure
            on the host which needs to enter maintenance mode during the update and
            allow the update to go through.'
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.common.SystemAutoMgmtFlag'
        waitInSecForAppUp:
          maximum: 86400
          minimum: 60
          type: integer
          description: Number of seconds LCM waits for the VMs to come up after exiting
            host maintenance mode
          format: int32
      additionalProperties: false
      description: Specification for running an update operation
    lcm.v4.r0.a1.operations.UpdateApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - $ref: '#/components/schemas/prism.v4.r0.a1.config.TaskReference'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/operations/$actions/performUpdate
        Post operation
    lcm.v4.r0.a1.resources.GetBundleInfoApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LcmBundle'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/resources/bundles/{uuid}
        Get operation
    lcm.v4.r0.a1.resources.PutBundleApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - $ref: '#/components/schemas/prism.v4.r0.a1.config.TaskReference'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/resources/bundles/{uuid}
        Put operation
    lcm.v4.r0.a1.resources.DelBundleApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/resources/bundles/{uuid}
        Delete operation
    lcm.v4.r0.a1.resources.LcmBundle:
      title: LCM Bundle
      type: object
      properties:
        name:
          type: string
          description: Name of the LCM bundle
        uuid:
          pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
          type: string
          description: UUID of the LCM bundle
        size:
          type: string
          description: Size of the LCM bundle
        type:
          type: string
          description: LCM bundle type
        images:
          type: array
          description: Details of the LCM image
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LcmImageDetails'
      additionalProperties: false
      description: Details of the LCM bundle
    lcm.v4.r0.a1.resources.LcmImageDetails:
      title: LCM image
      type: object
      properties:
        uuid:
          pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
          type: string
          description: UUID of the entity to be used
        entityClass:
          type: string
          description: LCM entity class
        entityModel:
          type: string
          description: LCM entity model
        version:
          type: string
          description: LCM Image version
        releaseNotes:
          type: string
          description: Release notes for the LCM image
      additionalProperties: false
      description: Details of the LCM image
    lcm.v4.r0.a1.resources.GetBundlesApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - type: array
            items:
              $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LcmBundle'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/resources/bundles
        Get operation
    lcm.v4.r0.a1.resources.LcmBundlesSpec:
      title: LCM bundle creation specification
      type: object
      properties:
        isThirdParty:
          type: boolean
          description: Indicates whether the LCM bundle is for a third party image
            or not
        thirdPartySpec:
          $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LcmThirdPartyUploadSpec'
        redistributableSpec:
          $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LcmRedistributableUploadSpec'
      additionalProperties: false
      description: LCM bundle creation request type
    lcm.v4.r0.a1.resources.PostBundlesApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LcmBundlesStatus'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/resources/bundles
        Post operation
    lcm.v4.r0.a1.resources.LcmThirdPartyUploadSpec:
      title: LCM third party upload specification
      type: object
      properties:
        specVersion:
          type: string
          description: Version specification for the third party upload metadata
        version:
          type: string
          description: LCM Image version
        entityClass:
          type: string
          description: LCM entity class
        entityModel:
          type: string
          description: LCM entity model
        hwFamilyList:
          type: string
          description: A hardware family for a LCM entity
        releaseNotes:
          type: string
          description: Release notes for the LCM image
        status:
          $ref: '#/components/schemas/lcm.v4.r0.a1.common.LcmAvailableVersionStatus'
        imageDetails:
          type: array
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.resources.ThirdPartyImageFileDetailsSpec'
      additionalProperties: false
      description: Upload specification for a third party bundle
    lcm.v4.r0.a1.resources.LcmRedistributableUploadSpec:
      title: Redistributable bundle creation specification
      type: object
      properties:
        name:
          type: string
          description: Name of the LCM bundle
      additionalProperties: false
      description: Upload specification for a Nutanix redistributable bundle
    lcm.v4.r0.a1.common.LcmAvailableVersionStatus:
      title: Available version status
      type: string
      description: Available version types
      enum:
      - $UNKNOWN
      - $REDACTED
      - recommended
      - critical
      - latest
      - deprecated
      - emergency
      - available
      - LTS
      - STS
    lcm.v4.r0.a1.resources.ThirdPartyImageFileDetailsSpec:
      title: File specifications in a third party image
      type: object
      properties:
        checksumType:
          type: string
          description: Checksum type for a third party image
          enum:
          - shasum
        checksum:
          type: string
        size:
          type: integer
          description: File size for a third party image
        name:
          type: string
          description: File name for a third party image
      additionalProperties: false
      description: File detail for a third party image
    lcm.v4.r0.a1.resources.LcmBundlesStatus:
      title: LCM bundle creation response
      type: object
      properties:
        taskUuid:
          $ref: '#/components/schemas/prism.v4.r0.a1.config.TaskReference'
        bundleUuid:
          pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
          type: string
          description: UUID of the LCM bundle
      additionalProperties: false
      description: LCM bundle creation response
    lcm.v4.r0.a1.resources.GetLcmConfigApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LcmConfig'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/resources/config
        Get operation
    lcm.v4.r0.a1.resources.LcmConfig:
      title: LCM configuration
      type: object
      properties:
        url:
          type: string
          description: URL of the LCM repository.
        autoInventoryEnabled:
          type: boolean
          description: Indicates if the auto inventory operation is enabled. The default
            value is set to False
        autoInventoryScheduledTime:
          pattern: ^([01]\d|2[0-3]):([0-5]\d)$
          type: string
          description: The scheduled time in "%H:%M" 24-hour format of the next inventory
            execution. Used when auto_inventory_enabled is set to True. The default
            schedule time is 03:00(AM)
        inventoryParallelLimit:
          minimum: 1
          type: integer
          description: Number of parallel threads running inventory. The default value
            is set to 8
          format: int32
        uiVersion:
          type: string
          description: LCM UI version installed on the cluster
        lcmVersion:
          type: string
          description: LCM version installed on the cluster
        semanticVersion:
          type: string
          description: LCM semantic version installed on the cluster
        buildType:
          type: string
          description: Indicates whether the LCM binaries in the URL are of type connected-site
            or dark-site
        skippedPrecheckNames:
          type: array
          description: List of skipped prechecks.
          items:
            type: string
        productMetaDisabled:
          type: boolean
          description: Indicates if Product Meta filtering is disabled. The default
            value is False.
        productMetaUrl:
          type: string
          description: URL for Product Meta artifact
        recoveryDisabled:
          type: boolean
          description: LCM can automatically recover a benign failure in the early
            stages of an upgrade. This value indicates if that feature is enabled.
            The default value is False.
        isDarksite:
          type: boolean
          description: Indicates if LCM is pointing to a dark site. It is set to True
            if the LCM URL is not pointing to the default Nutanix portal URL.
        enableHttps:
          type: boolean
          description: Indicates if the LCM URL has HTTPS enabled. The default value
            is True
        apiEnabled:
          type: boolean
          description: Indicates if REST APIs for LCM is enabled. The default value
            is True
        prismApiTimeout:
          type: integer
          description: Timeout to send GET/POST requests to Prism
          format: int32
        distributeInventory:
          type: boolean
          description: Indicates if LCM is enabled to distribute inventory across
            the cluster. The default value is True
        userPreferences:
          type: array
          description: Indicates the user preferences.
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.resources.UserPreference'
        metricsEnabled:
          type: boolean
          description: Indicates if metrics for LCM is enabled. The default value
            is True
        supportedSoftwareEntities:
          type: array
          description: List of entities for which One-Click upgrades are supported
          items:
            type: string
        deprecatedSoftwareEntities:
          type: array
          description: List of entities for which One-Click upgrades are not available
          items:
            type: string
        uploadedBundle:
          type: boolean
          description: Indicates if the bundle is uploaded or not.
        moduleAutoUpgradeEnabled:
          type: boolean
          description: Indicates if LCM is enabled to auto-upgrade products. The default
            value is False.
        redfishOOBUpdateSupport:
          type: boolean
          description: Indicates if Redfish out of band update is enabled. The default
            value is False.
        enableAutoLogCollection:
          type: boolean
          description: Indicates if automatic log collection on failures is enabled
            or not. The default value is True
      additionalProperties: false
      description: LCM configuration on the cluster
    lcm.v4.r0.a1.resources.PutLcmConfigApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LcmConfig'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/resources/config
        Put operation
    lcm.v4.r0.a1.resources.UserPreference:
      title: User preference for configuration
      type: object
      properties:
        userChangedHttp:
          type: boolean
          description: Indicates if a user has changed the HTTP/HTTPS setting
      additionalProperties: false
      description: Indicates if a user has changed the configuration
    lcm.v4.r0.a1.resources.GetNodePrioritiesApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - $ref: '#/components/schemas/lcm.v4.r0.a1.resources.NodePriorityConfig'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/resources/config/node-priorities
        Get operation
    lcm.v4.r0.a1.resources.NodePriorityConfig:
      title: LCM node priority config
      type: object
      properties:
        priorityNodeMap:
          type: object
          description: Priority node map where the key is node UUID and value is node
            priority
      additionalProperties: false
      description: LCM node priority config
    lcm.v4.r0.a1.resources.PostNodePrioritiesApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - $ref: '#/components/schemas/lcm.v4.r0.a1.resources.NodePriorityConfig'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/resources/config/node-priorities
        Post operation
    lcm.v4.r0.a1.resources.GetNodePriorityNodeApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - $ref: '#/components/schemas/lcm.v4.r0.a1.resources.NodePriorityConfig'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/resources/config/node_priority/{nodeUuid}
        Get operation
    lcm.v4.r0.a1.resources.GetEntityApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LcmEntity'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/resources/entities/{uuid}
        Get operation
    lcm.v4.r0.a1.resources.LcmEntity:
      title: LCM entity
      type: object
      properties:
        uuid:
          pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
          type: string
          description: UUID of the entity to be used
          format: UUID
        entityDescription:
          type: string
          description: Description of an LCM entity
        entityClass:
          type: string
          description: LCM entity class
        entityType:
          $ref: '#/components/schemas/lcm.v4.r0.a1.common.LcmEntityType'
        entityModel:
          type: string
          description: LCM entity model
        locationId:
          type: string
          description: The location of the LCM entity, it can be at the cluster level
            or at the node level, in the format of "cluster:uuid" or "node:uuid"
        version:
          type: string
          description: Current version of an LCM entity
        requestVersion:
          type: string
          description: The requested update version of an LCM entity.
        lastUpdatedTime:
          type: string
          description: UTC date and time in RFC-3339 format when the task was last
            updated.
          format: isoformat
        id:
          type: string
          description: Unique identifier of an LCM entity e.g. "HDD serial number"
        singleGroupUuid:
          pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
          type: string
          description: UUID of the group that this LCM entity is part of
          format: UUID
        entityDetails:
          type: object
          description: Detailed information for the LCM entity. For example, firmware
            entities contain additional information about NIC and so on
        childEntities:
          type: object
          description: Component information for the payload based entity
        availableVersions:
          type: array
          description: List of available versions for an LCM entity to update
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LcmAvailableVersion'
        subEntities:
          type: array
          description: A list of sub-entities applicable to the entity.
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.resources.SubEntity'
      additionalProperties: false
      description: Details of an LCM entity
    lcm.v4.r0.a1.common.LcmEntityType:
      title: LCM entity type
      type: string
      description: Type of an LCM entity
      enum:
      - $UNKNOWN
      - $REDACTED
      - software
      - firmware
    lcm.v4.r0.a1.resources.LcmAvailableVersion:
      title: LCM available version
      type: object
      properties:
        version:
          type: string
          description: Available version for the LCM entity
        status:
          $ref: '#/components/schemas/lcm.v4.r0.a1.common.LcmAvailableVersionStatus'
        isEnabled:
          type: boolean
          description: Indicates if the available update is enabled
        uuid:
          pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
          type: string
          description: UUID of the entity to be used
          format: UUID
        order:
          type: integer
          description: Order of this available version (1 being the lowest and 6 being
            the highest) when multiple versions are present with different status.
          format: int64
        disableReason:
          type: string
          description: Reason for disabling the available version
        releaseNotes:
          type: string
          description: Release notes corresponding to the update
        releaseDate:
          type: string
          description: Release date for the entities that need this information
          format: isoformat
        otherMetadata:
          type: string
          description: Update metadata other than the release notes - like a custom
            message
        childEntities:
          type: object
          description: Component information for the payload based entity
        singleGroupUuid:
          pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
          type: string
          description: UUID of the group that this LCM entity is part of
          format: UUID
        dependencies:
          type: array
          description: List of dependencies for the available version.
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LcmDependency'
      additionalProperties: false
      description: Available version for an LCM entity to update
    lcm.v4.r0.a1.resources.SubEntity:
      title: Definition of the sub-entity in LCM.
      type: object
      properties:
        entityClass:
          type: string
          description: LCM entity class
        entityModel:
          type: string
          description: LCM entity model
        hardwareFamily:
          type: string
          description: A hardware family for a LCM entity
        version:
          type: string
          description: The version of the sub-entity.
      additionalProperties: false
      description: A partial entity that is tied to the larger entity in LCM.
    lcm.v4.r0.a1.resources.LcmDependency:
      title: LCM available version dependency
      type: object
      properties:
        entityClass:
          type: string
          description: LCM entity class
        entityModel:
          type: string
          description: LCM entity model
        version:
          type: string
          description: Available version for the LCM entity
        entityVersions:
          type: object
          description: Information of the dependent entity versions for this available
            entity
      additionalProperties: false
      description: Dependency of an LCM entity available version.
    lcm.v4.r0.a1.resources.GetEntitiesApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - type: array
            items:
              $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LcmEntity'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/resources/entities
        Get operation
    lcm.v4.r0.a1.resources.GetHistoryByUuidApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - type: array
            items:
              $ref: '#/components/schemas/lcm.v4.r0.a1.resources.OperationHistoryElement'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/resources/history/{uuid}
        Get operation
    lcm.v4.r0.a1.resources.OperationHistoryElement:
      title: LCM operation
      type: object
      properties:
        operationId:
          pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
          type: string
          description: UUID of an LCM operation
          format: UUID
        operationType:
          $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LcmOpType'
        lcmVersion:
          type: string
          description: LCM version installed on the cluster
        startTime:
          type: string
          description: Start time for an LCM operation
          format: isoformat
        endTime:
          type: string
          description: End time for an LCM operation
          format: isoformat
        operationDone:
          type: boolean
          description: Boolean that indicates whether the operation was done
        opExceptionReport:
          type: string
          description: Details of the operation failure
        entityInfo:
          type: array
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.resources.EntityInfo'
      additionalProperties: false
      description: Details about an LCM operation that was run
    lcm.v4.r0.a1.resources.LcmOpType:
      title: LCM operation type
      type: string
      description: Type of LCM operation that was run
      enum:
      - $UNKNOWN
      - $REDACTED
      - kLcmPrecheckOperation
      - kLcmDownloadOperation
      - kLcmInventoryOperation
      - kLcmUpdateOperation
    lcm.v4.r0.a1.resources.EntityInfo:
      title: LCM entity information
      type: object
      properties:
        entityType:
          $ref: '#/components/schemas/lcm.v4.r0.a1.common.LcmEntityType'
        entityClass:
          type: string
          description: LCM entity class
        entityModel:
          type: string
          description: LCM entity model
        opEnvironment:
          $ref: '#/components/schemas/lcm.v4.r0.a1.resources.OperationEnv'
        childEntities:
          type: string
          description: Detailed information for the LCM entity. For example, firmware
            entities contain additional information about NIC and so on
        instances:
          type: array
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.resources.EntityInstance'
      additionalProperties: false
      description: Information about an LCM entity affected by the operation.
    lcm.v4.r0.a1.resources.OperationEnv:
      title: LCM operation environment
      type: string
      description: Environment in which the operation was run. For example, CVM, Phoenix,
        Host etc
      enum:
      - $UNKNOWN
      - $REDACTED
      - CVM
      - Host
      - Phoenix
      - PC
    lcm.v4.r0.a1.resources.EntityInstance:
      title: LCM entity instance
      type: object
      properties:
        version:
          type: string
          description: Current version of an LCM entity
        requestVersion:
          type: string
          description: The requested update version of an LCM entity.
        locationId:
          type: string
          description: The location of the LCM entity, it can be at the cluster level
            or at the node level, in the format of "cluster:uuid" or "node:uuid"
        startTime:
          type: string
          description: Start time for an LCM operation
          format: isoformat
        endTime:
          type: string
          description: End time for an LCM operation
          format: isoformat
        taskInfo:
          type: array
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.resources.TaskInfo'
      additionalProperties: false
      description: LCM entity instance of an entity affected by the operation
    lcm.v4.r0.a1.resources.TaskInfo:
      title: Task info
      type: object
      properties:
        status:
          $ref: '#/components/schemas/lcm.v4.r0.a1.resources.Status'
      additionalProperties: false
      description: Details about LCM Task
    lcm.v4.r0.a1.resources.Status:
      title: Task Status
      type: object
      properties:
        description:
          type: string
          description: Description of the current status of the operation
        operationDone:
          type: boolean
          description: Boolean that indicates whether the operation was done
        state:
          type: integer
          description: State of the current operation
      additionalProperties: false
      description: Status of a task
    lcm.v4.r0.a1.resources.GetHistoryApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - type: array
            items:
              $ref: '#/components/schemas/lcm.v4.r0.a1.resources.OperationHistoryItem'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/resources/history
        Get operation
    lcm.v4.r0.a1.resources.OperationHistoryItem:
      title: LCM operation
      type: object
      properties:
        operationId:
          pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
          type: string
          description: UUID of an LCM operation
          format: UUID
        operationType:
          $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LcmOpType'
        lcmVersion:
          type: string
          description: LCM version installed on the cluster
        startTime:
          type: string
          description: Start time for an LCM operation
          format: isoformat
        endTime:
          type: string
          description: End time for an LCM operation
          format: isoformat
        operationDone:
          type: boolean
          description: Boolean that indicates whether the operation was done
        opExceptionReport:
          type: string
          description: Details of the operation failure
        entityInfo:
          type: array
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.resources.EntityInfo'
      additionalProperties: false
      description: Details about an LCM operation that was run
    lcm.v4.r0.a1.resources.GetImagesApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - type: array
            items:
              $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LcmImage'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/resources/images
        Get operation
    lcm.v4.r0.a1.resources.LcmImage:
      title: LCM image
      type: object
      properties:
        entityClass:
          type: string
          description: LCM entity class
        entityType:
          $ref: '#/components/schemas/lcm.v4.r0.a1.common.LcmEntityType'
        entityModel:
          type: string
          description: LCM entity model
        hardwareFamily:
          type: string
          description: A hardware family for a LCM entity
        version:
          type: string
          description: Current version of an LCM entity
        files:
          type: array
          description: List of files in the image
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LcmImageFile'
      additionalProperties: false
      description: LCM image (List of LCM image files)
    lcm.v4.r0.a1.resources.LcmImageFile:
      title: LCM image file
      type: object
      properties:
        globalCatalogItemUuid:
          pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
          type: string
          description: Image file global catalog item UUID.
          format: UUID
        name:
          type: string
          description: LCM image file name
        sizeBytes:
          type: integer
          description: LCM image file size
          format: int64
        nfsPath:
          type: string
          description: NFS path for the LCM image
        shasum:
          type: string
          description: LCM image SHA
      additionalProperties: false
      description: Description of LCM image file
    lcm.v4.r0.a1.resources.GetLcmStatusApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LcmStatus'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/resources/status
        Get operation
    lcm.v4.r0.a1.resources.LcmStatus:
      title: LCM framework Status
      type: object
      properties:
        frameworkVersion:
          $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LcmFrameworkVersionInfo'
        inProgressOperation:
          $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LcmInProgressOp'
        cancelIntent:
          $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LcmCancelIntent'
        uploadInfo:
          $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LcmUploadInfo'
      additionalProperties: false
      description: Details of LCM framework status
    lcm.v4.r0.a1.resources.LcmFrameworkVersionInfo:
      title: LCM version information
      type: object
      properties:
        localVersion:
          type: string
          description: LCM version installed on the cluster
        remoteVersion:
          type: string
          description: LCM framework version present in the LCM URL
        updateNeeded:
          type: boolean
          description: Boolean that indicates if LCM framework update is needed
      additionalProperties: false
      description: LCM framework version information
    lcm.v4.r0.a1.resources.LcmInProgressOp:
      title: LCM ongoing operation information
      type: object
      properties:
        uuid:
          pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
          type: string
          description: Root task UUID of the operation, if it is in running state
          format: UUID
        type:
          type: string
          description: Type of the operation tracked by the task.
      additionalProperties: false
      description: Operation type and UUID of an ongoing operation in LCM
    lcm.v4.r0.a1.resources.LcmCancelIntent:
      title: Cancel Intent
      type: object
      properties:
        isSet:
          type: boolean
          description: Boolean that indicates if cancel intent for LCM update is set
            or not
      additionalProperties: false
      description: Intent to cancel an ongoing LCM update
    lcm.v4.r0.a1.resources.LcmUploadInfo:
      title: LCM upload Info
      type: object
      properties:
        taskUuid:
          pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
          type: string
          description: Upload task UUID
          format: UUID
      additionalProperties: false
      description: LCM upload information
    lcm.v4.r0.a1.resources.GetLogBayTagsApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - type: array
            items:
              $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LogbayTag'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/resources/logbay/tags
        Get operation
    lcm.v4.r0.a1.resources.LogbayTag:
      title: List of NCC Logbay tags applicable for LCM
      type: object
      properties:
        logbayTag:
          type: string
          description: NCC Logbay tag applicable for LCM log collection
      additionalProperties: false
      description: List of NCC Logbay tags applicable for LCM log collection
    lcm.v4.r0.a1.resources.GetLogBayItemsApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - type: array
            items:
              $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LogbayItem'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/resources/logbay/items
        Get operation
    lcm.v4.r0.a1.resources.LogbayItem:
      title: List of NCC Logbay items applicable for LCM
      type: object
      properties:
        logbayItem:
          type: string
          description: NCC Logbay item applicable for LCM log collection
      additionalProperties: false
      description: List of NCC Logbay items applicable for LCM log collection
    lcm.v4.r0.a1.resources.GetModuleConfigApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - $ref: '#/components/schemas/lcm.v4.r0.a1.resources.ModuleConfig'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/resources/moduleConfig
        Get operation
    lcm.v4.r0.a1.resources.ModuleConfig:
      title: LCM module Configuration
      type: object
      properties:
        redfishDisabled:
          type: boolean
          description: Indicates if redfish disabled. Default is False
        rimParams:
          type: array
          description: List of repository image module (RIM) parameters
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.resources.RimParams'
      additionalProperties: false
      description: LCM module Configuration
    lcm.v4.r0.a1.resources.PutModuleConfigApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - $ref: '#/components/schemas/lcm.v4.r0.a1.resources.ModuleConfig'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/resources/moduleConfig
        Put operation
    lcm.v4.r0.a1.resources.RimParams:
      title: Repository image module (RIM) parameters
      type: object
      properties:
        url:
          pattern: ^((http[s]?):\/)?\/?([^:\/\s]+)((\/\w+)*(:[0-9]+)*?\/)([\w\-\.]+[^#?\s]+)(.*)?(#[\w\-]+)?$
          type: string
          description: URL of the RIM.
        path:
          type: string
          description: Path of the RIM
        component:
          type: string
          description: Component name of the RIM
        tags:
          type: array
          description: Tag list of the RIM
          items:
            type: string
        flags:
          type: array
          description: Flag list of the RIM
          items:
            type: string
        description:
          type: string
          description: Description of the RIM
        urlSetByUser:
          type: boolean
          description: Indicates if the RIM URL is set by the user
      additionalProperties: false
      description: RIM parameters for one component
    lcm.v4.r0.a1.common.EntityUpdateSpecs:
      title: List of entity specifications
      type: object
      properties:
        entityUpdateSpecs:
          type: array
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.common.EntityUpdateSpec'
      additionalProperties: false
      description: List of entity update objects for getting recommendations
    lcm.v4.r0.a1.resources.GenUpgradePlanApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - $ref: '#/components/schemas/lcm.v4.r0.a1.resources.UpgradePlan'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/resources/plan
        Post operation
    lcm.v4.r0.a1.resources.UpgradePlan:
      title: LCM upgrade plan
      type: object
      properties:
        hostUpgradePlans:
          type: array
          description: List of upgrade plans for the hosts
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.resources.HostUpgradePlan'
      additionalProperties: false
      description: List of upgrade notifications and upgrade plan for the input entity
    lcm.v4.r0.a1.resources.HostUpgradePlan:
      title: LCM upgrade plan for a node or cluster
      type: object
      properties:
        locationId:
          type: string
          description: The location of the LCM entity, it can be at the cluster level
            or at the node level, in the format of "cluster:uuid" or "node:uuid"
        hypervisorType:
          $ref: '#/components/schemas/lcm.v4.r0.a1.common.HypervisorType'
        action:
          type: string
          description: The description of the most disruptive action that will occur
            on the node or cluster
      additionalProperties: false
      description: LCM upgrade plan for a node or cluster
    lcm.v4.r0.a1.resources.RecommendationSpec:
      title: LCM update recommendation specification
      type: object
      properties:
        entityTypes:
          type: array
          description: Type of an LCM entity
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.common.LcmEntityType'
        targetEntities:
          type: array
          description: List of target entity objects for getting recommendations
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.resources.TargetEntity'
        entityUpdateSpecs:
          type: array
          description: List of entity update objects for getting recommendations
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.common.EntityUpdateSpec'
        entityDeploySpecs:
          type: array
          description: List of deploy specifications for use in the recommendations
            API
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.common.EntityIdentifierSpec'
      additionalProperties: false
      description: LCM update recommendation specification
    lcm.v4.r0.a1.resources.GetUpdateRecApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - $ref: '#/components/schemas/lcm.v4.r0.a1.resources.RecommendationResult'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/resources/recommendations
        Post operation
    lcm.v4.r0.a1.resources.TargetEntity:
      title: LCM target entity
      type: object
      properties:
        entityClass:
          type: string
          description: LCM entity class
        entityModel:
          type: string
          description: LCM entity model
        locationId:
          type: string
          description: The location of the LCM entity, it can be at the cluster level
            or at the node level, in the format of "cluster:uuid" or "node:uuid"
        id:
          type: string
          description: Unique identifier of an LCM entity e.g. "HDD serial number"
        version:
          type: string
          description: LCM entity update version
      additionalProperties: false
      description: LCM target entity for which recommendations are requested
    lcm.v4.r0.a1.common.EntityIdentifierSpec:
      title: Identifier of an entity in LCM
      type: object
      properties:
        entityClass:
          type: string
          description: LCM entity class
        entityModel:
          type: string
          description: LCM entity model
        hardwareFamily:
          type: string
          description: A hardware family for a LCM entity
      additionalProperties: false
      description: Unique identifier of an entity in LCM
    lcm.v4.r0.a1.resources.RecommendationResult:
      title: LCM update recommendations
      type: object
      properties:
        entityUpdateSpecs:
          $ref: '#/components/schemas/lcm.v4.r0.a1.common.EntityUpdateSpecs'
        skippedEntities:
          type: array
          description: List of skipped LCM entities from the input recommendations
            specification
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.resources.UpdatedTargetEntityResult'
        modifiedVersions:
          type: array
          description: List of modified LCM entities from the input recommendations
            specification
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.resources.UpdatedTargetEntityResult'
        addedEntities:
          type: array
          description: List of added LCM entities to the input recommendations specification
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.resources.UpdatedTargetEntityResult'
        deployableVersions:
          type: array
          description: List of deployable entities and their dependencies
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.resources.DeployableVersion'
      additionalProperties: false
      description: LCM update recommendations
    lcm.v4.r0.a1.resources.UpdatedTargetEntityResult:
      title: LCM error target entity
      type: object
      properties:
        targetEntity:
          $ref: '#/components/schemas/lcm.v4.r0.a1.resources.UpdatedTargetEntity'
        entityUuid:
          type: string
          description: UUID of the entity to be used
        message:
          type: string
          description: Error message for the target entity that failed in the input
            recommendations specification
      additionalProperties: false
      description: LCM error target entity
    lcm.v4.r0.a1.resources.DeployableVersion:
      title: Deployable versions in recommendations
      type: object
      properties:
        versionIdentifierSpec:
          $ref: '#/components/schemas/lcm.v4.r0.a1.common.VersionIdentifierSpec'
        updateDependencies:
          $ref: '#/components/schemas/lcm.v4.r0.a1.common.EntityUpdateSpecs'
      additionalProperties: false
      description: List of deployable versions based on entity types, versions and
        its dependencies
    lcm.v4.r0.a1.resources.UpdatedTargetEntity:
      title: Updated LCM target entity
      type: object
      properties:
        entityClass:
          type: string
          description: LCM entity class
        entityModel:
          type: string
          description: LCM entity model
        locationId:
          type: string
          description: The location of the LCM entity, it can be at the cluster level
            or at the node level, in the format of "cluster:uuid" or "node:uuid"
        version:
          type: string
          description: LCM entity update version
        entityUuid:
          type: string
          description: UUID of the entity to be used
      additionalProperties: false
      description: Updated LCM target entity in recommendation result
    lcm.v4.r0.a1.common.VersionIdentifierSpec:
      title: Identifier of an entity version in LCM
      type: object
      properties:
        entityIdentifierSpec:
          $ref: '#/components/schemas/lcm.v4.r0.a1.common.EntityIdentifierSpec'
        version:
          type: string
          description: Entity target version
      additionalProperties: false
      description: Identifies a version of an entity type in LCM
    lcm.v4.r0.a1.resources.GetTaskByUuidApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LcmTask'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/resources/tasks/{uuid}
        Get operation
    lcm.v4.r0.a1.resources.LcmTask:
      title: LCM Task
      type: object
      properties:
        uuid:
          pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
          type: string
          description: UUID of LCM task
          format: UUID
        logicalTimestamp:
          type: integer
          description: Number of times the task has been updated. The value increases
            sequentially with each update of the task and can be used to verify if
            there have been changes to the task.
          format: int64
        operationType:
          $ref: '#/components/schemas/lcm.v4.r0.a1.resources.OperationType'
        percentageComplete:
          type: integer
          description: Completion percentage of a task
          format: int32
        status:
          $ref: '#/components/schemas/lcm.v4.r0.a1.resources.StatusType'
        clusterUuid:
          pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
          type: string
          description: Reference to the cluster the task is being executed on.
          format: UUID
        parentTaskUuid:
          pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
          type: string
          description: Reference to the parent task
          format: UUID
        subtaskUuids:
          type: array
          description: List with the reference to the sub-task UUIDs
          items:
            pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
            type: string
            format: UUID
        creationTime:
          type: string
          description: UTC date and time in RFC-3339 format when the task was created.
          format: isoformat
        creationTimeUsecs:
          type: integer
          description: Time in microseconds from Epoch when task was created.
          format: int64
        lastUpdateTime:
          type: string
          description: UTC date and time in RFC-3339 format when the task was last
            updated.
          format: isoformat
        startTime:
          type: string
          description: Start time for an LCM operation
          format: isoformat
        completionTime:
          type: string
          description: End time for an LCM operation
          format: isoformat
        errorCode:
          type: string
          description: In case of task failure this field will provide the error code.
        errorDetail:
          type: string
          description: In case of task failure this field will provide the error description.
        message:
          type: string
          description: Any custom message related to the task
        entityUuids:
          type: array
          description: List of entity identifiers being upgraded, in UUID format
          items:
            pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
            type: string
            format: UUID
      additionalProperties: false
      description: Details about LCM Task
    lcm.v4.r0.a1.resources.OperationType:
      title: LCM operation type
      type: string
      description: Type of the operation tracked by the task.
      enum:
      - $UNKNOWN
      - $REDACTED
      - LcmRootTask
      - LcmDownloadTask
      - LcmInventoryTask
      - LcmUpdateClusterTask
      - LcmUpdateClusterNodeTask
      - LcmUpdateNodeTask
      - LcmPrechecksTask
      - LcmProductMetaTask
    lcm.v4.r0.a1.resources.StatusType:
      title: Task Status
      type: string
      description: Current state of the task.
      enum:
      - $UNKNOWN
      - $REDACTED
      - QUEUED
      - RUNNING
      - SUCCEEDED
      - ABORTED
      - SUSPENDED
      - FAILED
    lcm.v4.r0.a1.resources.GenUpgradeNotifApiResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/common.v1.r0.a3.response.ApiResponseMetadata'
        data:
          oneOf:
          - $ref: '#/components/schemas/lcm.v4.r0.a1.resources.UpgradeNotifications'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.ErrorResponse'
      additionalProperties: false
      description: REST response for all response codes in api path /lcm/v4.0.a1/resources/notifications
        Post operation
    lcm.v4.r0.a1.resources.UpgradeNotifications:
      title: LCM upgrade notifications
      type: object
      properties:
        upgradePlan:
          type: array
          description: List of upgrade notifications and upgrade plan for the input
            entity
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.resources.NotificationsSpec'
      additionalProperties: false
      description: LCM upgrade notifications
    lcm.v4.r0.a1.resources.NotificationsSpec:
      title: LCM upgrade notification for a node or cluster
      type: object
      properties:
        notificationType:
          type: string
          description: Type of LCM upgrade notification generated. It can be any one
            of the values like Entity, Location, Generic or Workflow. The only types
            supported today are Entity and Location
        notifications:
          type: array
          description: List of notifications for this entity
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.resources.Notification'
        entityModel:
          type: string
          description: LCM entity model
        entityClass:
          type: string
          description: LCM entity class
        fromVersion:
          type: string
          description: Current version of an LCM entity
        toVersion:
          type: string
          description: The requested update version of an LCM entity.
        locationId:
          type: string
          description: The location of the LCM entity, it can be at the cluster level
            or at the node level, in the format of "cluster:uuid" or "node:uuid"
        hypervisorType:
          $ref: '#/components/schemas/lcm.v4.r0.a1.common.HypervisorType'
      additionalProperties: false
      description: LCM upgrade notification for a node or cluster
    lcm.v4.r0.a1.resources.Notification:
      title: LCM upgrade notification details
      type: object
      properties:
        severityLevel:
          type: string
          description: Severity level for a notification. Permissible values are INFO,
            WARNING and NOTICE
        message:
          type: string
          description: A message with notification details. The description of the
            most disruptive action that will occur on the node or the cluster. INFO,
            WARNING or NOTICE based message for an entity
      additionalProperties: false
      description: Detailed LCM upgrade notification information for this entity
    lcm.v4.r0.a1.common.EntityDeploySpec:
      title: Entity deploy specification
      type: object
      properties:
        entityIdentifierSpec:
          $ref: '#/components/schemas/lcm.v4.r0.a1.common.EntityIdentifierSpec'
      additionalProperties: false
      description: A specification defining the entity being deployed and its version
    lcm.v4.r0.a1.common.CollectMetrics:
      title: Optional object to collect metrics or not, default value false
      type: object
      properties:
        collectMetrics:
          type: boolean
          description: Boolean argument to collect metrics data or not
          default: false
      additionalProperties: false
      description: Collect metrics boolean attribute
      nullable: true
    prism.v4.r0.a1.config.TaskReference:
      type: object
      properties:
        extId:
          pattern: ^[a-zA-Z0-9/+]*={0,2}:[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
          type: string
          description: Globally unique identifier of a task.
      additionalProperties: false
      description: Reference to a task tracking the async operation.
    lcm.v4.r0.a1.resources.LcmImages:
      title: List of LCM images
      type: object
      properties:
        images:
          type: array
          description: List of LCM images
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.resources.LcmImage'
      additionalProperties: false
      description: List of LCM images
    lcm.v4.r0.a1.error.ErrorResponse:
      type: object
      properties:
        error:
          oneOf:
          - type: array
            items:
              $ref: '#/components/schemas/lcm.v4.r0.a1.error.AppMessage'
          - $ref: '#/components/schemas/lcm.v4.r0.a1.error.SchemaValidationError'
      additionalProperties: false
      description: This schema is auto-generated by the Open API Dev Platform as REST
        response for 4xx and 5xx error responses.
    lcm.v4.r0.a1.error.AppMessage:
      type: object
      properties:
        message:
          type: string
        severity:
          $ref: '#/components/schemas/common.v1.r0.a3.config.MessageSeverity'
        code:
          type: string
        locale:
          type: string
          description: The locale for the message description.
          default: en_US
        errorGroup:
          type: string
        argumentsMap:
          type: object
          additionalProperties:
            type: string
      additionalProperties: false
      description: This schema is generated from AppMessage.java
    lcm.v4.r0.a1.error.MessageSeverity:
      type: string
      description: Enum schema MessageSeverity
      enum:
      - $UNKNOWN
      - $REDACTED
      - INFO
      - WARNING
      - ERROR
      x-codegen-hint:
        $any:
        - type: entity-identifier
          properties:
            identifiers:
            - value: $UNKNOWN
              index: 201
            - value: $REDACTED
              index: 202
            - value: INFO
              index: 203
            - value: WARNING
              index: 204
            - value: ERROR
              index: 205
    lcm.v4.r0.a1.error.SchemaValidationError:
      type: object
      properties:
        timestamp:
          type: string
        statusCode:
          type: integer
        error:
          type: string
        path:
          type: string
        validationErrorMessages:
          type: array
          items:
            $ref: '#/components/schemas/lcm.v4.r0.a1.error.SchemaValidationErrorMessage'
      additionalProperties: false
      description: This schema is generated from SchemaValidationError.java
    lcm.v4.r0.a1.error.SchemaValidationErrorMessage:
      type: object
      properties:
        location:
          type: string
        message:
          type: string
        attributePath:
          type: string
      additionalProperties: false
      description: This schema is generated from SchemaValidationErrorMessage.java
    common.v1.r0.a3.response.ApiResponseMetadata:
      type: object
      properties:
        flags:
          type: array
          items:
            $ref: '#/components/schemas/common.v1.r0.a3.config.Flag'
        links:
          type: array
          items:
            $ref: '#/components/schemas/common.v1.r0.a3.response.ApiLink'
        totalAvailableResults:
          type: integer
          format: int32
        messages:
          type: array
          items:
            $ref: '#/components/schemas/common.v1.r0.a3.config.Message'
        extraInfo:
          type: array
          description: An array of entity specific metadata
          items:
            $ref: '#/components/schemas/common.v1.r0.a3.config.KVPair'
      additionalProperties: false
      description: |
        The metadata associated with an API response. Always present and minimally contains the self link for the API request that produced this response.  Also contains pagination data for paginated requests.
    common.v1.r0.a3.config.Flag:
      type: object
      properties:
        name:
          type: string
        value:
          type: boolean
          default: false
      additionalProperties: false
      description: |
        Many entities in the Nutanix APIs carry flags.  This object captures all the flags associated with that entity through this object.  The field that hosts this type of an object must have an attribute called x-bounded-map-keys that tells which flags are actually present for that entity.
    common.v1.r0.a3.response.ApiLink:
      type: object
      properties:
        href:
          type: string
          description: |
            The URL at which the entity described by this link can be accessed.
        rel:
          type: string
          description: |
            A name that identifies the relationship of this link to the object that is returned by the URL.  The special value of "self" identifies the URL for the object.
      additionalProperties: false
      description: |
        A HATEOAS style link for the response.  Each link contains a user friendly name identifying the link and an address for retrieving the particular resource.
    common.v1.r0.a3.config.Message:
      type: object
      properties:
        code:
          type: string
          description: |
            A code that uniquely identifies a message.
        message:
          type: string
        locale:
          type: string
          description: |
            The locale for the message description.
          default: en_US
        severity:
          $ref: '#/components/schemas/common.v1.r0.a3.config.MessageSeverity'
      additionalProperties: false
    common.v1.r0.a3.config.KVPair:
      type: object
      properties:
        name:
          type: string
          description: The key of this key value pair
        value:
          description: The value associated with the key for this key-value pair
          oneOf:
          - type: string
          - type: integer
      additionalProperties: false
      description: |
        A map describing a set of keys and their corresponding values.
    common.v1.r0.a3.config.MessageSeverity:
      type: string
      description: |
        The message severity.
      enum:
      - $UNKNOWN
      - $REDACTED
      - INFO
      - WARNING
      - ERROR
  securitySchemes:
    basicAuthScheme:
      type: http
      scheme: basic
